<html xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 9">
<meta name=Originator content="Microsoft Word 9">
<link rel=File-List href="./t3refl_files/filelist.xml">
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Merkin Muffley</o:Author>
  <o:LastAuthor>Unknown User</o:LastAuthor>
  <o:Revision>16</o:Revision>
  <o:TotalTime>71</o:TotalTime>
  <o:Created>2001-02-17T23:29:00Z</o:Created>
  <o:LastSaved>2002-01-27T00:02:00Z</o:LastSaved>
  <o:Pages>3</o:Pages>
  <o:Words>1430</o:Words>
  <o:Characters>8155</o:Characters>
  <o:Lines>67</o:Lines>
  <o:Paragraphs>16</o:Paragraphs>
  <o:CharactersWithSpaces>10014</o:CharactersWithSpaces>
  <o:Version>9.3821</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:Zoom>125</w:Zoom>
  <w:DrawingGridHorizontalSpacing>6 pt</w:DrawingGridHorizontalSpacing>
  <w:DrawingGridVerticalSpacing>6 pt</w:DrawingGridVerticalSpacing>
  <w:DisplayVerticalDrawingGridEvery>0</w:DisplayVerticalDrawingGridEvery>
  <w:UseMarginsForDrawingGridOrigin/>
  <w:Compatibility>
   <w:SpaceForUL/>
   <w:BalanceSingleByteDoubleByteWidth/>
   <w:DoNotLeaveBackslashAlone/>
   <w:ULTrailSpace/>
   <w:DoNotExpandShiftReturn/>
   <w:WW6BorderRules/>
   <w:FootnoteLayoutLikeWW8/>
   <w:ShapeLayoutLikeWW8/>
   <w:AlignTablesRowByRow/>
   <w:ForgetLastTabAlignment/>
   <w:AutoSpaceLikeWord95/>
   <w:LayoutRawTableWidth/>
   <w:LayoutTableRowsApart/>
  </w:Compatibility>
 </w:WordDocument>
</xml><![endif]-->
<style>
<!--
 /* Font Definitions */
@font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;
	mso-font-charset:2;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:0 268435456 0 0 -2147483648 0;}
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-layout-grid-align:none;
	punctuation-wrap:simple;
	text-autospace:none;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
h3
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:3;
	mso-layout-grid-align:none;
	punctuation-wrap:simple;
	text-autospace:none;
	font-size:13.0pt;
	font-family:Arial;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;
	text-underline:single;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;
	text-underline:single;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-layout-grid-align:none;
	punctuation-wrap:simple;
	text-autospace:none;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";}
tt
	{mso-ascii-font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Courier New";
	mso-bidi-font-family:"Times New Roman";}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
@list l0
	{mso-list-id:552279620;
	mso-list-type:hybrid;
	mso-list-template-ids:-1573627876 67698689 67698691 67698693 67698689 67698691 67698693 67698689 67698691 67698693;}
@list l0:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	font-family:Symbol;}
@list l1
	{mso-list-id:2135636851;
	mso-list-type:hybrid;
	mso-list-template-ids:-246406068 67698695 67698691 67698693 67698689 67698691 67698693 67698689 67698691 67698693;}
@list l1:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F071;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	mso-ansi-font-size:8.0pt;
	font-family:Wingdings;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>
</head>

<body lang=EN-US link=blue vlink=purple style='tab-interval:.5in'>

<div class=Section1>

<h3>Reflection</h3>

<p class=MsoNormal>The term &quot;Reflection&quot; refers to a set of
mechanisms in a programming language that let a running program dynamically
inspect its own structure.<span style="mso-spacerun: yes">  </span>Reflection features
vary by language; static languages such as C and C++ offer essentially no
reflection features, while interpreted languages often let the program do
almost anything the interpreter itself could.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>TADS 3 offers a number of reflection features, described
below.</p>

<h3>Determining a Value's Type</h3>

<p class=MsoNormal>The TADS language does not require (or allow) you to specify
at compile-time the type of data that a variable or property can hold.<span
style="mso-spacerun: yes">  </span>When a program is running, a variable or
property can hold any kind of value, and you can change the type it stores at
any time simply by assigning it a new value.<span style="mso-spacerun: yes"> 
</span>In this sense, the TADS language is not &quot;statically typed&quot;:
there is no compile-time type associated with a variable or property value.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>However, the language is strongly typed, but at run-time
rather than at compile-time: each value has a specific type, and the type of a
value itself can never change (even though its container can change type when
you store a new value in it).<span style="mso-spacerun: yes">  </span>In
addition, the system does not allow you to perform arbitrary conversions
between types; you can never use an integer as though it were an object
reference, for example.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>You can access the type of any value using the <a
href="t3tgen.htm#dataType">dataType()</a> intrinsic function.<span
style="mso-spacerun: yes">  </span>This function returns a code that indicates
the &quot;primitive&quot; (built-in) type of the value.<span
style="mso-spacerun: yes">  </span>The primitive types are the basic types
built in to the language: true, nil, integer, string, list, object reference,
function pointer, property, enumerator.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>If the primitive type of a value is object reference, you
can learn more about the type by inspecting the class relationships of the
object.<span style="mso-spacerun: yes">  </span>At the simplest level, you can
determine if the object is related by inheritance to a particular class using
the <a href="t3objcl.htm#ofKind">ofKind(<i>baseClass</i>)</a> method on the
object.<span style="mso-spacerun: yes">  </span>If you need more general
information, you can use the <a href="t3objcl.htm#getSuperclassList">getSuperclassList()</a>
method to obtain a list of all of the direct superclasses of the object.</p>

<h3>Determining a Property's Definition</h3>

<p class=MsoNormal>The dataType() function can be used with any value, but
sometimes it is useful to obtain the type of a particular property definition
for a particular object without evaluating the property.<span
style="mso-spacerun: yes">  </span>If an object's property is defined as a
method, evaluating the property will call the method; sometimes it is necessary
to learn whether or not the property is defined as a method without actually
calling the method.<span style="mso-spacerun: yes">  </span>For these cases,
you can use the <a href="t3objcl.htm#prop_type">propType(&amp;<i>prop</i>)</a>
method, which obtains the type of data defined for a property without actually
evaluating the property.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>You can determine if an object defines a property at all
using the <a href="t3objcl.htm#propDefined">propDefined(<i>prop, flags</i>)</a>
method.<span style="mso-spacerun: yes">  </span>This method also lets you
determine whether the object defines the method directly or inherits it from a
superclass, and when the method is inherited, to identify the superclass from
which the object inherits the method.</p>

<h3>Enumerating Active Objects</h3>

<p class=MsoNormal>You can enumerate all of the objects in the running program
using the <a href="t3tgen.htm#firstobj">firstObj()</a> and <a
href="t3tgen.htm#nextobj">nextObj()</a> intrinsic functions.<span
style="mso-spacerun: yes">  </span>These functions let you iterate through the
set of all objects in the program, including objects statically defined in the
compiler and those dynamically allocated during execution.</p>

<h3>Accessing Compiler Symbols: the reflectionServices object</h3>

<p class=MsoNormal>TADS 3 lets a running program access the global symbols that
were defined during compilation.<span style="mso-spacerun: yes">  </span>This
powerful capability makes it possible to interpret strings into object
references, properties, and function references, so that you can do things such
as call a property of an object given the name of the property as a string.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>The standard TADS 3 library provides an optional module that
you can include in your program for a simple interface to the compiler
symbols.<span style="mso-spacerun: yes">  </span>To use these services, simply include
the module <tt><span style='font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>reflect.t</span></tt> in your build.<span
style="mso-spacerun: yes">  </span>Note that this is designed to be a
separately-compiled module, so do <i>not </i>#include it from your source
modules - instead, simply add it to the t3make command line when you build your
program:</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style="mso-spacerun: yes">   </span>t3make myProg.t reflect.t</pre>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>Note that, by default, <tt><span style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>reflect.t</span></tt> does <i>not</i>
include support for the BigNumber intrinsic class.<span style="mso-spacerun:
yes">  </span>However, you can enable BigNumber support by defining the symbol
REFLECT_BIGNUM on the compiler command line:</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style="mso-spacerun: yes">   </span>t3make -DREFLECT_BIGNUM myProg.t reflect.</pre>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>The <tt><span style='font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>reflectionServices</span></tt> object provides the
high-level compiler symbols interface.<span style="mso-spacerun: yes"> 
</span>The methods of this object are discussed below.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal><b>formatStackFrame(fr, includeSourcePos) - </b>returns a
string with a formatted representation of the stack frame <i>fr</i>, which must
be an object of class T3StackInfo (the type of object in the list returned by
the intrinsic function <a href="t3t3.htm#t3GetStackTrace">t3GetStackTrace()</a>).<span
style="mso-spacerun: yes">  </span>If <i>includeSourcePos</i> is true, and
source information is available for the frame, the return value includes a
printable representation of the source position's filename and line
number.<span style="mso-spacerun: yes">  </span>The return values look like
this:</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal><span style='mso-tab-count:1'>                    </span>myObj.prop1('abc',
123) myProg.t, line 52</p>

<p class=MsoNormal><b><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></b></p>

<p class=MsoNormal><b>valToSymbol(<i>val</i>)</b> - converts the value <i>val </i>to
a symbolic or string representation, as appropriate.<span style="mso-spacerun:
yes">  </span>If the value is an integer, string, BigNumber, list, true, or
nil, the return value is a string representation of the value appropriate to
the type (in the case of true and nil, the strings 'true' and 'nil' are
returned, respectively).<span style="mso-spacerun: yes">  </span>If the value
is an object, property pointer, function pointer, or enumerator, the return
value is a string giving the symbolic name of the value, if available, or a
string showing the type without a symbol (such as &quot;(obj)&quot; or
&quot;(prop)&quot;).</p>

<h3>Low-Level Compiler Symbol Services</h3>

<p class=MsoNormal>This section discusses the low-level compiler symbol
services.<span style="mso-spacerun: yes">  </span>These services are built into
the VM.<span style="mso-spacerun: yes">  </span>In most cases, you should use
the high-level services provided by the reflectionServices object, since that
interface is easier to use and provides substantially the same capabilities.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>The interpreter provides the program with the global symbols
via a <a href="t3lookup.htm">LookupTable</a> object.<span style="mso-spacerun:
yes">  </span>Each entry in the table has a compiler symbol as its key, and the
symbol's definition as its value.<span style="mso-spacerun: yes">  </span>For
example, each named object defined in the program has an entry in the table
with the compile-time name of the object as the key, and a reference to the
object as its value.<span style="mso-spacerun: yes">  </span>In addition, the
table includes all of the properties, functions, enumerators, and intrinsic
classes.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>To obtain a reference to the symbol table, use the <a
href="t3t3.htm#t3GetGlobalSymbols">t3GetGlobalSymbols()</a> intrinsic
function.<span style="mso-spacerun: yes">  </span>This function returns the
LookupTable object, if it's available, or nil if not.</p>

<p class=MsoNormal><br>
Note that the global symbol table is available from t3GetGlobalSymbols() only
under certain conditions:</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal style='mso-list:l0 level1 lfo3;tab-stops:list .5in'>The
     global symbols are available during pre-initialization when building a
     program.</li>
 <li class=MsoNormal style='mso-list:l0 level1 lfo3;tab-stops:list .5in'>The
     symbols are available during a normal interpreter session if the program
     was compiled with debugging symbols.</li>
</ul>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>At other times  specifically, during normal execution of a
program compiled for release, with no debugging information  the symbol table
is not available, so t3GetGlobalSymbols() will return nil.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>Note that you <i>can </i>use the global symbol table during
normal execution of a program compiled for release, if you want.<span
style="mso-spacerun: yes">  </span>To do this, simply obtain a reference to the
symbol table in pre-initialization code, and then store the reference in a
property of a statically-defined object.<span style="mso-spacerun: yes"> 
</span>When the compiler builds the final image file, it will automatically
keep the symbol table because of the reference stored in the program.<span
style="mso-spacerun: yes">  </span>Here's an example:</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style="mso-spacerun: yes">  </span>#include &lt;t3.h&gt;</pre><pre><span style="mso-spacerun: yes">  </span>#include &lt;lookup.h&gt;</pre><pre><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></pre><pre><span style="mso-spacerun: yes">  </span>symtabObj: PreinitObject</pre><pre><span style="mso-spacerun: yes">    </span>execute()</pre><pre><span style="mso-spacerun: yes">    </span>{</pre><pre><span style="mso-spacerun: yes">      </span>// stash a reference to the symbol table in</pre><pre><span style="mso-spacerun: yes">      </span>// my 'symtab' property, so that it will</pre><pre><span style="mso-spacerun: yes">      </span>// remain available at run-time</pre><pre><span style="mso-spacerun: yes">      </span>symtab = t3GetGlobalSymbols();</pre><pre><span style="mso-spacerun: yes">    </span>}</pre><pre><span style="mso-spacerun: yes">    </span>symtab = nil</pre><pre><span style="mso-spacerun: yes">  </span>;</pre>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>To reference the symbol table at
run-time, you would get it from symtabObj.symtab.<span style="mso-spacerun:
yes">  </span>Note that even though you stored a reference to the table,
t3GetGlobalSymbols() will <i>still </i>return nil at run-time if the program
wasn't compiled for debugging; the reference you saved is to the table that was
created during pre-initialization, which at run-time is just an ordinary
LookupTable object loaded from the image file.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>If you don't store a reference to the
symbol table during pre-initialization, the garbage collector will detect that
the table is unreachable, and will automatically discard the object.<span
style="mso-spacerun: yes">  </span>This saves space in the image file (and at
run-time) for programs that don't need access to the information during normal
execution.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>Here's an example of using the symbol
table to call a method by name.<span style="mso-spacerun: yes">  </span>This
example asks the user to type in the name of a method, then looks up the name
in the symbol table and calls the property, if it's found.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style="mso-spacerun: yes">  </span>callMethod(obj)</pre><pre><span style="mso-spacerun: yes">  </span>{</pre><pre><span style="mso-spacerun: yes">    </span>local methodName;</pre><pre><span style="mso-spacerun: yes">    </span>local prop;</pre><pre><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></pre><pre><span style="mso-spacerun: yes">    </span>// ask for the name of a method to call</pre><pre><span style="mso-spacerun: yes">    </span>&quot;Enter a method name: &quot;;</pre><pre><span style="mso-spacerun: yes">    </span>methodName = inputLine();</pre><pre><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></pre><pre><span style="mso-spacerun: yes">    </span>// look up the symbol</pre><pre><span style="mso-spacerun: yes">    </span>prop = symtabObj.symtab[methodName];</pre><pre><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></pre><pre><span style="mso-spacerun: yes">    </span>// make sure we found a property</pre><pre><span style="mso-spacerun: yes">    </span>if (prop == nil)</pre><pre><span style="mso-spacerun: yes">      </span>&quot;Undefined symbol&quot;;</pre><pre><span style="mso-spacerun: yes">    </span>else if (dataType(prop) != TypeProp)</pre><pre><span style="mso-spacerun: yes">      </span>&quot;Not a property&quot;;</pre><pre><span style="mso-spacerun: yes">    </span>else</pre><pre><span style="mso-spacerun: yes">    </span>{</pre><pre><span style="mso-spacerun: yes">      </span>// be sure to catch any errors in the call</pre><pre><span style="mso-spacerun: yes">      </span>try</pre><pre><span style="mso-spacerun: yes">      </span>{</pre><pre><span style="mso-spacerun: yes">        </span>// call the property with no arguments</pre><pre><span style="mso-spacerun: yes">        </span>obj.(prop)();</pre><pre><span style="mso-spacerun: yes">      </span>}<br>
<span style="mso-spacerun: yes">      </span>catch (Exception exc)</pre><pre><span style="mso-spacerun: yes">     </span><span style="mso-spacerun: yes"> </span>{</pre><pre><span style="mso-spacerun: yes">        </span>// show the error</pre><pre><span style="mso-spacerun: yes">        </span>&quot;Error calling method: &quot;;</pre><pre><span style="mso-spacerun: yes">        </span>exc.displayException();</pre><pre><span style="mso-spacerun: yes">      </span>}</pre><pre><span style="mso-spacerun: yes">    </span>}</pre><pre><span style="mso-spacerun: yes">  </span>}</pre>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

</div>

</body>

</html>
