<html xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 9">
<meta name=Originator content="Microsoft Word 9">
<link rel=File-List href="./t3exc_files/filelist.xml">
<title>Exceptions</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Merkin Muffley</o:Author>
  <o:LastAuthor>Dell User</o:LastAuthor>
  <o:Revision>3</o:Revision>
  <o:TotalTime>7</o:TotalTime>
  <o:Created>2000-02-26T00:25:00Z</o:Created>
  <o:LastSaved>2004-03-25T06:55:00Z</o:LastSaved>
  <o:Pages>4</o:Pages>
  <o:Words>1473</o:Words>
  <o:Characters>8397</o:Characters>
  <o:Lines>69</o:Lines>
  <o:Paragraphs>16</o:Paragraphs>
  <o:CharactersWithSpaces>10312</o:CharactersWithSpaces>
  <o:Version>9.2720</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:Zoom>125</w:Zoom>
  <w:DrawingGridHorizontalSpacing>6 pt</w:DrawingGridHorizontalSpacing>
  <w:DrawingGridVerticalSpacing>6 pt</w:DrawingGridVerticalSpacing>
  <w:DisplayVerticalDrawingGridEvery>0</w:DisplayVerticalDrawingGridEvery>
  <w:UseMarginsForDrawingGridOrigin/>
  <w:Compatibility>
   <w:SpaceForUL/>
   <w:BalanceSingleByteDoubleByteWidth/>
   <w:DoNotLeaveBackslashAlone/>
   <w:ULTrailSpace/>
   <w:DoNotExpandShiftReturn/>
   <w:WW6BorderRules/>
   <w:FootnoteLayoutLikeWW8/>
   <w:ShapeLayoutLikeWW8/>
   <w:AlignTablesRowByRow/>
   <w:ForgetLastTabAlignment/>
   <w:AutoSpaceLikeWord95/>
   <w:LayoutRawTableWidth/>
   <w:LayoutTableRowsApart/>
  </w:Compatibility>
 </w:WordDocument>
</xml><![endif]-->
<style>
<!--
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-layout-grid-align:none;
	punctuation-wrap:simple;
	text-autospace:none;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
h1
	{mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:1;
	mso-layout-grid-align:none;
	punctuation-wrap:simple;
	text-autospace:none;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-font-kerning:0pt;
	font-weight:normal;
	font-style:italic;}
h2
	{mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	text-align:center;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:2;
	mso-layout-grid-align:none;
	punctuation-wrap:simple;
	text-autospace:none;
	font-size:10.0pt;
	font-family:"Times New Roman";}
h3
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:3;
	mso-layout-grid-align:none;
	punctuation-wrap:simple;
	text-autospace:none;
	font-size:13.0pt;
	font-family:Arial;}
h4
	{mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:4;
	mso-layout-grid-align:none;
	punctuation-wrap:simple;
	text-autospace:none;
	font-size:10.0pt;
	font-family:"Times New Roman";}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-layout-grid-align:none;
	punctuation-wrap:simple;
	text-autospace:none;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-style:italic;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;
	text-underline:single;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;
	text-underline:single;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-layout-grid-align:none;
	punctuation-wrap:simple;
	text-autospace:none;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";}
tt
	{mso-ascii-font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Courier New";
	mso-bidi-font-family:"Times New Roman";}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
-->
</style>
</head>

<body lang=EN-US link=blue vlink=purple style='tab-interval:.5in'>

<div class=Section1>

<h3 style='tab-stops:.5in'>Exceptions</h3>

<p class=MsoNormal style='tab-stops:.5in'>TADS 3 provides an
&quot;exception&quot; mechanism, which allows the program to signal and handle
unusual conditions in a structured manner.<span style="mso-spacerun: yes"> 
</span>TADS 3 exceptions work very much like Java exceptions, so if you've used
Java you'll find the TADS 3 exception mechanism familiar.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>An exception is any unusual
condition.<span style="mso-spacerun: yes">  </span>Exceptions usually indicate
errors, but they don't have to; they can also be used for a variety of other
purposes, such as terminating a procedure early or recovering from a resource
shortage.<span style="mso-spacerun: yes">  </span>An exception is represented
by an object; you can tell what kind of exception you have by looking at the
class of the exception object.<span style="mso-spacerun: yes">  </span>Exception
objects are the same as any other objects, so you can create as many different
types of exception classes as you need.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>Exception handling has two
components: &quot;throwing&quot; and &quot;catching.&quot;</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>When something unusual occurs in your
program that you wish to handle using the exception mechanism, you &quot;throw
an exception.&quot;<span style="mso-spacerun: yes">  </span>This means that you
create a new object to describe the exception, then use the <tt><span
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>throw</span></tt>
statement (new to TADS 3) to throw the exception.<span style="mso-spacerun:
yes">  </span>The <tt><span style='font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>throw</span></tt> statement is a little like <tt><span
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>return</span></tt>
or <tt><span style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>goto</span></tt>,
in that it abruptly transfers execution somewhere else; hence any statement immediately
following a <tt><span style='font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>throw</span></tt> is unreachable (unless, of course, it can
be reached by a label or some other means that doesn't involve going through
the <tt><span style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>throw</span></tt>
statement).</p>

<p class=MsoNormal style='tab-stops:.5in'><br>
Where does <tt><span style='font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>throw</span></tt> send execution?<span style="mso-spacerun:
yes">  </span>This is where catching comes in.<span style="mso-spacerun: yes"> 
</span>When you throw an exception, the VM looks for an enclosing block of code
protected within a <tt><span style='font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>try</span></tt> block.<span style="mso-spacerun: yes"> 
</span>This search is done according to the &quot;call chain&quot; that the
program has executed to reach the current location – in other words, the series
of function and method calls that have been made so far.<span
style="mso-spacerun: yes">  </span>When the VM finds an enclosing <tt><span
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>try</span></tt>
statement, it looks at the associated <tt><span style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>catch</span></tt> blocks.<span
style="mso-spacerun: yes">  </span>If there's a <tt><span style='font-family:
"Courier New";mso-bidi-font-family:"Times New Roman"'>catch</span></tt> for a
superclass of the thrown exception, the VM transfers control to the code within
the <tt><span style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>catch</span></tt>
block; otherwise, the VM skips that <tt><span style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>try</span></tt> and tries to find an
enclosing one.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>For each <tt><span style='font-family:
"Courier New";mso-bidi-font-family:"Times New Roman"'>try</span></tt> statement
that encloses the current code but doesn't define a <tt><span style='font-family:
"Courier New";mso-bidi-font-family:"Times New Roman"'>catch</span></tt> block
for the thrown exception, the VM checks to see if the try has an associated <tt><span
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>finally</span></tt>
block, and executes the enclosed code before looking for an enclosing <tt><span
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>try</span></tt>
block.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>If there's no enclosing <tt><span
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>try</span></tt>
block with a <tt><span style='font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>catch</span></tt> for the thrown exception, the VM
terminates execution of the program.<span style="mso-spacerun: yes"> 
</span>The VM will check the <tt><span style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>exceptionMessage</span></tt> property
of the unhandled exception object, and display the value of the property if the
value is a (single-quoted) string value.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>A <tt><span style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>try</span></tt> statement looks like
this:</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style="mso-spacerun: yes">   </span>try</pre><pre><span style="mso-spacerun: yes">   </span>{</pre><pre><span style="mso-spacerun: yes">      </span>// some code that might throw an exception, or call</pre><pre><span style="mso-spacerun: yes">      </span>// a function or method that might do so</pre><pre><span style="mso-spacerun: yes">   </span>}</pre><pre><span style="mso-spacerun: yes">   </span>catch (FirstExceptionClass exc1)</pre><pre><span style="mso-spacerun: yes">   </span>{</pre><pre><span style="mso-spacerun: yes">      </span>// handle FirstExceptionClass exceptions</pre><pre><span style="mso-spacerun: yes">      </span>// exc1 is a local with the thrown exception object</pre><pre><span style="mso-spacerun: yes">   </span>}</pre><pre><span style="mso-spacerun: yes">   </span>catch (SecondExceptionClass exc2)</pre><pre><span style="mso-spacerun: yes">   </span>{</pre><pre><span style="mso-spacerun: yes">      </span>// handle SecondExceptionClass exceptions</pre><pre><span style="mso-spacerun: yes">      </span>// exc2 is a local with the thrown exception object</pre><pre><span style="mso-spacerun: yes">   </span>}</pre><pre><span style="mso-spacerun: yes">   </span>finally</pre><pre><span style="mso-spacerun: yes">   </span>{</pre><pre><span style="mso-spacerun: yes">      </span>// do some cleanup work – this gets called</pre><pre><span style="mso-spacerun: yes">      </span>// whether an exception occurs or not</pre><pre><span style="mso-spacerun: yes">   </span>}</pre>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>A <tt><span style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>try</span></tt> statement can have as
many <tt><span style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>catch</span></tt>
clauses as needed – it can even have no <tt><span style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>catch</span></tt> clauses at all.<span
style="mso-spacerun: yes">  </span>The <tt><span style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>finally</span></tt> clause is optional,
but only one is allowed if it's present at all, and it must follow all of the <tt><span
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>catch</span></tt>
clauses.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>Each <tt><span style='font-family:
"Courier New";mso-bidi-font-family:"Times New Roman"'>catch</span></tt> clause
has a name following the name of the exception.<span style="mso-spacerun:
yes">  </span>The <tt><span style='font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>catch</span></tt> creates a new local variable with the
given name – the variable is local to the code within the <tt><span
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>catch</span></tt>
clause.<span style="mso-spacerun: yes">  </span>When the exception is caught,
the VM will store a reference to the thrown exception object in this variable;
this is the same object that was used in the <tt><span style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>throw</span></tt> statement.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>The VM searches for a <tt><span
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>catch</span></tt>
clause that matches the exception class starting with the first <tt><span
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>catch</span></tt>
associated with the <tt><span style='font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>try</span></tt>, and considers each <tt><span
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>catch</span></tt>
in turn until it finds a match.<span style="mso-spacerun: yes">  </span>A <tt><span
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>catch</span></tt>
matches if the named class is a superclass of the exception behing handled.<span
style="mso-spacerun: yes">  </span>Because the <tt><span style='font-family:
"Courier New";mso-bidi-font-family:"Times New Roman"'>catch</span></tt> clauses
are tried in order, you can have one handler for a specific type of exception,
and also have a later handler for a superclass of the first exception; the
specific type will be handled by the first handler, since the VM will find that
handler earlier than the more general handler.<span style="mso-spacerun: yes"> 
</span>In such cases, only the first matching handler will be invoked.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>If a <tt><span style='font-family:
"Courier New";mso-bidi-font-family:"Times New Roman"'>finally</span></tt>
clause is present, the VM will <i>always</i> execute the code contained within,
no matter how control leaves the <tt><span style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>try</span></tt> block.<span
style="mso-spacerun: yes">  </span>If control leaves via an exception that
isn't handled by any of the <tt><span style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>try</span></tt> statement's <tt><span
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>catch</span></tt>
clauses, the VM will execute the <tt><span style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>finally</span></tt> code before it
continues the search for the next enclosing <tt><span style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>try</span></tt>.<span
style="mso-spacerun: yes">  </span>If no exceptions occur, so control leaves
the <tt><span style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>try</span></tt>
block normally, the <tt><span style='font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>finally</span></tt> code is executed immediately after the
last statement in the <tt><span style='font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>try</span></tt> block.<span style="mso-spacerun: yes"> 
</span>If an exception is thrown but one of the <tt><span style='font-family:
"Courier New";mso-bidi-font-family:"Times New Roman"'>try</span></tt>
statement's <tt><span style='font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>catch</span></tt> clauses catches the exception, the VM
executes the <tt><span style='font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>finally</span></tt> code immediately after the last
statement in the <tt><span style='font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>catch</span></tt> block.</p>

<pre style='tab-stops:.5in'><span style='font-family:"Times New Roman"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre>

<p class=MsoNormal style='tab-stops:.5in'>Note that the code in a <tt><span
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>finally</span></tt>
clause will execute <i>no matter how execution leaves the </i><tt><span
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>try</span></tt><i>
block</i>.<span style="mso-spacerun: yes">  </span>This even includes <tt><span
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>goto</span></tt>,
<tt><span style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>return</span></tt>,
<tt><span style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>break</span></tt>,
and <tt><span style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>continue</span></tt>
statements.<span style="mso-spacerun: yes">  </span>If the <tt><span
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>try</span></tt>
block contains a <tt><span style='font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>return</span></tt> statement, the program will first
calculate the value of the expression being returned (if any), then it will
execute the <tt><span style='font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>finally</span></tt> code, and only then will control
transfer back to the caller of the current function or method.<span
style="mso-spacerun: yes">  </span>(It's important that the return value is
calculated first, because it counts as code that's protected by the <tt><span
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>try</span></tt>.<span
style="mso-spacerun: yes">  </span>If an exception is thrown while calculating
that value, it'll be handled the same as any other exception thrown inside the <tt><span
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>try</span></tt>.)
<span style="mso-spacerun: yes">  </span>If you use <tt><span style='font-family:
"Courier New";mso-bidi-font-family:"Times New Roman"'>goto</span></tt>, <tt><span
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>break</span></tt>,
or <tt><span style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>continue</span></tt>
within the <tt><span style='font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>try</span></tt> block to jump to a statement that's outside
the <tt><span style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>try</span></tt>
block, the program will execute the <tt><span style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>finally</span></tt> code just before
jumping to the target statement.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>Here's an example that illustrates
how all of this works.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'>#include
&quot;tads.h&quot;<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'>#include
&quot;t3.h&quot;<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'>_main(args)<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'>{<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">    </span>t3SetSay(_say_embed);<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">    </span>a();<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'>}<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'>_say_embed(str)
{ tadsSay(str); }<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'>class
Exception: object<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">    </span>construct(msg) { exceptionMessage = msg; }<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">    </span>exceptionMessage = ''<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'>;<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'>class
ResourceError: Exception;<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'>class
ParsingError: Exception;<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'>a()<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'>{<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">    </span>b(1);<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">    </span>b(2);<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">    </span>b(3);<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'>}<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'>b(x)<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'>{<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">    </span>&quot;This is
b(&lt;&lt;x&gt;&gt;)\n&quot;;<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">    </span><o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">    </span>try<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">    </span>{<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">        </span>c(x);<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">    </span>}<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">    </span>catch (Exception exc)<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">    </span>{<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">        </span>&quot;b: Caught an exception:
&lt;&lt;exc.exceptionMessage&gt;&gt;\n&quot;;<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">    </span>}<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">    </span><o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">    </span>&quot;Done with
b(&lt;&lt;x&gt;&gt;)\n&quot;;<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'>}<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'>c(x)<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'>{<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">    </span>&quot;This is
c(&lt;&lt;x&gt;&gt;)\n&quot;;<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">    </span><o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">    </span>try<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">    </span>{<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">        </span>d(x);<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">    </span>}<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">    </span>catch(ParsingError perr)<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">    </span>{<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">        </span>&quot;c: Caught a parsing error:
&lt;&lt;perr.exceptionMessage&gt;&gt;\n&quot;;<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">    </span>}<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">    </span>finally<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">    </span>{<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">        </span>&quot;In c's finally clause\n&quot;;<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">    </span>}<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">    </span><o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">    </span>&quot;Done with
c(&lt;&lt;x&gt;&gt;)\n&quot;;<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'>}<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'>d(x)<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'>{<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">    </span>&quot;This is
d(&lt;&lt;x&gt;&gt;)\n&quot;;<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">    </span>e(x);<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">    </span>&quot;Done with
d(&lt;&lt;x&gt;&gt;)\n&quot;;<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'>}<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'>e(x)<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'>{<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">    </span>&quot;This is e(&lt;&lt;x&gt;&gt;)\n&quot;;<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">    </span>if (x == 1)<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">    </span>{<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">        </span>&quot;Throwing resource
error...\n&quot;;<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">        </span>throw new ResourceError('some resource
error');<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">    </span>}<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">    </span>else if (x == 2)<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">    </span>{<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">        </span>&quot;Throwing parsing
error...\n&quot;;<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">        </span>throw new ParsingError('some parsing
error');<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">  </span><span style="mso-spacerun: yes">  </span>}<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">    </span><o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">    </span>&quot;Done with
e(&lt;&lt;x&gt;&gt;)\n&quot;;<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'>}<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>When this program is run, it will
show the following output:</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'>This
is b(1)<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'>This
is c(1)<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'>This
is d(1)<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'>This
is e(1)<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'>Throwing
resource error...<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'>In
c's finally clause<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'>b:<span
style="mso-spacerun: yes">  </span>Caught an exception:<span
style="mso-spacerun: yes">  </span>some resource error<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'>Done
with b(1)<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'>This
is b(2)<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'>This
is c(2)<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'>This
is d(2)<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'>This
is e(2)<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'>Throwing
parsing error...<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'>c:<span
style="mso-spacerun: yes">  </span>Caught a parsing error:<span
style="mso-spacerun: yes">  </span>some parsing error<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'>In
c's finally clause<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'>Done
with c(2)<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'>Done
with b(2)<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'>This
is b(3)<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'>This
is c(3)<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'>This
is d(3)<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'>This
is e(3)<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'>Done
with e(3)<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'>Done
with d(3)<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'>In
c's finally clause<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'>Done
with c(3)<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><span style='font-family:"Courier New"'>Done
with b(3)<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>This illustrates several aspects of
exceptions.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>First, note that function <tt><span
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>d()</span></tt>
doesn't have any exception handlers (i.e., it has no <tt><span
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>try</span></tt>
block).<span style="mso-spacerun: yes">  </span>Since this function is not
concerned with catching any exceptions that occur within itself or functions it
calls, it doesn't need any exception handlers.<span style="mso-spacerun: yes"> 
</span>This is one of the advantages of exceptions over using return codes to
indicate errors: intermediate routines that don't care about exceptions don't
need to include any code to check for them.<span style="mso-spacerun: yes"> 
</span>When searching for a <tt><span style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>try</span></tt> block, the VM simply
skips function <tt><span style='font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>d()</span></tt> if it's in the call chain, since it has no
handlers.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>Second, note that function <tt><span
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>c()</span></tt>
only handles <tt><span style='font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>ParsingError</span></tt> exceptions.<span
style="mso-spacerun: yes">  </span>Since this function has no handlers for any
other exception types, the VM skips past this function when trying to find a
handler for the <tt><span style='font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>ResourceError</span></tt> exception.<span
style="mso-spacerun: yes">  </span>So, not only can a function ignore
exceptions entirely, but it can selectively include handlers only for the specific
exceptions it wants to handle, and ignore anything else.</p>

<p class=MsoNormal style='tab-stops:.5in'><br>
Third, note that, once an exception is caught, it no longer disrupts the
program's control flow.<span style="mso-spacerun: yes">  </span>In other words,
an exception isn't re-thrown after it's caught, unless you explicitly throw it
again with another <tt><span style='font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>throw</span></tt> statement in the handler that caught it.</p>

<h3 style='tab-stops:.5in'>Run-time Error Handling</h3>

<p class=MsoNormal style='tab-stops:.5in'>When your program does something
illegal, such as trying to multiple two strings together or extracting an
element from a list at an invalid index, a run-time error occurs.<span
style="mso-spacerun: yes">  </span>In past versions of TADS, there wasn't much
you could do about such errors; the interpreter displayed a message and ended
the current command.<span style="mso-spacerun: yes">  </span>TADS 3, in
contrast, treats all run-time errors as ordinary exceptions; this means that
you can handle run-time errors using the same try/catch mechanism that you use
to handle your own exceptions.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>The compiler looks for an object
class called <tt><span style='font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>RuntimeError</span></tt> defined in your program.<span
style="mso-spacerun: yes">  </span>If this class is defined, the compiler will set
up the image file so that the VM creates an object of this class whenever a
run-time error occurs.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>The <tt><span style='font-family:
"Courier New";mso-bidi-font-family:"Times New Roman"'>RuntimeError</span></tt>
class has one special requirement, which is that it must provide a constructor
with this interface:</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style="mso-spacerun: yes">    </span>construct(errno, ...)</pre>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>The first argument is the VM error
code; any additional arguments are parameters to the error.<span
style="mso-spacerun: yes">  </span>In addition, the VM will automatically set
the <tt><span style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>exceptionMessage</span></tt>
property to a (single-quoted) string giving a descriptive message for the
run-time error.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

</div>

</body>

</html>
