<html xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 9">
<meta name=Originator content="Microsoft Word 9">
<link rel=File-List href="./t3anonfn_files/filelist.xml">
<title>Anonymous functions: TADS 3 lets you write a callback function in-line
wherever a pointer to a function is required</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Merkin Muffley</o:Author>
  <o:LastAuthor>Merkin Muffley</o:LastAuthor>
  <o:Revision>10</o:Revision>
  <o:TotalTime>87</o:TotalTime>
  <o:Created>2000-03-19T02:12:00Z</o:Created>
  <o:LastSaved>2000-03-25T21:13:00Z</o:LastSaved>
  <o:Pages>3</o:Pages>
  <o:Words>1619</o:Words>
  <o:Characters>9233</o:Characters>
  <o:Lines>76</o:Lines>
  <o:Paragraphs>18</o:Paragraphs>
  <o:CharactersWithSpaces>11338</o:CharactersWithSpaces>
  <o:Version>9.2720</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:Zoom>125</w:Zoom>
  <w:DrawingGridHorizontalSpacing>6 pt</w:DrawingGridHorizontalSpacing>
  <w:DrawingGridVerticalSpacing>6 pt</w:DrawingGridVerticalSpacing>
  <w:DisplayVerticalDrawingGridEvery>0</w:DisplayVerticalDrawingGridEvery>
  <w:UseMarginsForDrawingGridOrigin/>
  <w:Compatibility>
   <w:SpaceForUL/>
   <w:BalanceSingleByteDoubleByteWidth/>
   <w:DoNotLeaveBackslashAlone/>
   <w:ULTrailSpace/>
   <w:DoNotExpandShiftReturn/>
   <w:WW6BorderRules/>
   <w:FootnoteLayoutLikeWW8/>
   <w:ShapeLayoutLikeWW8/>
   <w:AlignTablesRowByRow/>
   <w:ForgetLastTabAlignment/>
   <w:AutoSpaceLikeWord95/>
   <w:LayoutRawTableWidth/>
   <w:LayoutTableRowsApart/>
  </w:Compatibility>
 </w:WordDocument>
</xml><![endif]-->
<style>
<!--
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-layout-grid-align:none;
	punctuation-wrap:simple;
	text-autospace:none;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
h3
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:3;
	mso-layout-grid-align:none;
	punctuation-wrap:simple;
	text-autospace:none;
	font-size:13.0pt;
	font-family:Arial;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-layout-grid-align:none;
	punctuation-wrap:simple;
	text-autospace:none;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";}
tt
	{mso-ascii-font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Courier New";
	mso-bidi-font-family:"Times New Roman";}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
@list l0
	{mso-list-id:1610239838;
	mso-list-type:hybrid;
	mso-list-template-ids:390862320 67698689 67698691 67698693 67698689 67698691 67698693 67698689 67698691 67698693;}
@list l0:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	font-family:Symbol;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>
</head>

<body lang=EN-US style='tab-interval:.5in'>

<div class=Section1>

<h3>Anonymous Functions</h3>

<p class=MsoNormal style='tab-stops:.5in'>It's often useful to define a
function or method that takes a pointer to another function as an argument; we
refer to such an argument function as a &quot;callback&quot; function, because
it's a way for the function or method to call back to code provided by its
caller.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>Callbacks are especially useful in
libraries, because they allow a function to be written generically and then
re-used for multiple purposes.<span style="mso-spacerun: yes">  </span>The part
of the task that's common to all of the different uses is made into the library
function, and it in turn invokes a callback to carry out the specialized
parts.<span style="mso-spacerun: yes">  </span>Not only does this save the
trouble of writing the common part of the code multiple times, but it also
makes the code much easier to maintain, because there's only one copy of the
common library function.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>Callbacks are especially useful for
&quot;enumerating&quot; the items in a set, which simply means that we're
performing an operation on a number of items that are somehow related together
into a group.<span style="mso-spacerun: yes">  </span>Some sets are easy to
enumerate; for example, performing an operation on each item in a list is easy:</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style="mso-spacerun: yes">  </span>for (local i = 1, local cnt = lst.length() ; i &lt;= cnt ; ++i)</pre><pre><span style="mso-spacerun: yes">    </span>do_something_with lst[i];</pre>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>Some sets are much more complicated
to enumerate, though.<span style="mso-spacerun: yes">  </span>For example, we might
want to display all of the things a character in a game is carrying, and all of
the things those items contain, all of the things <i>they </i>contain, and so
forth.<span style="mso-spacerun: yes">  </span>This type of enumeration
requires a more complicated algorithm than the simple loop we can use for a
list, because we must traverse a tree of unknown depth.</p>

<p class=MsoNormal style='tab-stops:.5in'><br>
We could write our display function so that it contains the algorithm to
traverse the containment tree, but suppose that later we wanted to write a
function that counts all of the items in the same tree.<span
style="mso-spacerun: yes">  </span>It seems tedious to write all of that same
traversal code again, changing the lines of code that display names so that
they increment a counter instead.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>Fortunately, there is a better way –
use a callback!<span style="mso-spacerun: yes">  </span>Rather than writing a
function that traverses the containment tree and displays object names, we
instead write two functions.<span style="mso-spacerun: yes">  </span>The first
function simply displays the name of an object.<span style="mso-spacerun:
yes">  </span>The second only traverses the containment tree – but what it does
with each element is to invoke a callback function, passing the current element
as the parameter.<span style="mso-spacerun: yes">  </span>We combine these two
by calling the second function, passing the first function as the callback
function pointer, and between the two we have a way of traversing the tree and
displaying the contents.<span style="mso-spacerun: yes">  </span>If we want to
count the contents, all we have to do is write a new callback function that
increments a counter variable.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>Callbacks provide an excellent way of
re-using common code, but using regular functions as callbacks has some
disadvantages.<span style="mso-spacerun: yes">  </span>First, it makes for
somewhat verbose code, especially when the callback functions themselves are
very simple, as they tend to be – for our examples of displaying a name or
incrementing a counter, we've turned what would probably be a single line of
code into four or five lines to define a new function.<span
style="mso-spacerun: yes">  </span>Second, it scatters code around in the
source files, because the callback has to appear in a separate function from
the code that passes it to the library function.<span style="mso-spacerun:
yes">  </span>Third, if the calling function wants to share information with
the callback (which would be necessary for something like incrementing a
counter, because the counter's final value ultimately has to make it back to
the calling function), it's necessary for the caller and the callback to come
up with some way of passing information between one another; while this isn't
usually difficult, it does tend to add even more verbosity.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>Once again, there is a better way,
which is to use &quot;anonymous&quot; functions.<span style="mso-spacerun:
yes">  </span>An anonymous function is a function that you write directly where
you want to use it as a function pointer.<span style="mso-spacerun: yes"> 
</span>Anonymous functions solve all of the problems we just listed:</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal style='mso-list:l0 level1 lfo3;tab-stops:.5in'>An
     anonymous function is much less verbose than a separate named function.<i><o:p></o:p></i></li>
 <li class=MsoNormal style='mso-list:l0 level1 lfo3;tab-stops:.5in'>An
     anonymous function is written directly in the code where it's used.<i><o:p></o:p></i></li>
 <li class=MsoNormal style='mso-list:l0 level1 lfo3;tab-stops:.5in'>An
     anonymous function directly shares all of the local variables of the scope
     in which it is defined.<i><o:p></o:p></i></li>
</ul>

<h3>Anonymous Function Syntax</h3>

<p class=MsoNormal style='tab-stops:.5in'>An anonymous function definition
looks like this:</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style="mso-spacerun: yes">   </span>new function(x) { &quot;Hello from anonymous! x = &lt;&lt;x&gt;&gt;\n&quot;; }</pre>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>An anonymous function is effectively
an object in its own right, which is why the &quot;new&quot; keyword is
used.<span style="mso-spacerun: yes">  </span>The function has no name, so we
use the keyword &quot;function&quot; to indicate that we want to create a new
function.<span style="mso-spacerun: yes">  </span>If this function takes any
parameters, they appear in parentheses after the &quot;function&quot;
keyword.<span style="mso-spacerun: yes">  </span>Finally, we write the body of
the function, enclosed in braces; the body can contain any code that we could
put in an ordinary function.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>An anonymous function can be defined
anywhere an expression can go, so you can assign an anonymous function to a
variable, or pass it as an argument to another function.<span
style="mso-spacerun: yes">  </span>The latter case is the more common case,
because it allows us to invoke enumeration functions very concisely.<span
style="mso-spacerun: yes">  </span>For example, suppose we had an enumerator
function called enumItems() that enumerated some set of items through a
callback function.<span style="mso-spacerun: yes">  </span>If we wanted to
display all of the items that the function enumerates, we could write something
like this:</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style="mso-spacerun: yes">   </span>enumItems(new function(obj) { obj.sdesc; });</pre>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>If at some other point we wanted to
count all of the items the function enumerates, we could write this:</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style="mso-spacerun: yes">   </span>local cnt = 0;</pre><pre><span style="mso-spacerun: yes">   </span>enumItems(new function(obj) { ++cnt; });</pre>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>Since the value of an anonymous
function is simply a pointer to the function, we can assign an anonymous
function to a local variable or to a property:</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style="mso-spacerun: yes">   </span>local f = new function(x) { &quot;Hello from anonymous! x = &lt;&lt;x&gt;&gt;\n&quot;; }</pre>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>We call the function to which the
local variable &quot;f&quot; refers using the same syntax we'd use with an
ordinary function pointer:</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style="mso-spacerun: yes">   </span>f(7);</pre>

<h3>Referring to Local Variables</h3>

<p class=MsoNormal style='tab-stops:.5in'>Anonymous functions are especially
useful for iterators and enumerators, which are routines that invoke a callback
function for each member of a collection of some sort.<span
style="mso-spacerun: yes">  </span>For example, we could define an object class
with a &quot;contents&quot; property, and write an enumerator that invokes a
callback for each entry in the contents list:</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre>class Thing: object</pre><pre><span style="mso-spacerun: yes">    </span>contents = []</pre><pre><span style="mso-spacerun: yes">    </span>enumContents(func)</pre><pre><span style="mso-spacerun: yes">    </span>{</pre><pre><span style="mso-spacerun: yes">        </span>for (local i = 1, local len = contents.length() ;</pre><pre><span style="mso-spacerun: yes">            </span><span style="mso-spacerun: yes"> </span>i &lt;= len ; ++i)</pre><pre><span style="mso-spacerun: yes">            </span>func(contents[i]);<br
style='mso-special-character:line-break'>
<![if !supportLineBreakNewLine]><br style='mso-special-character:line-break'>
<![endif]></pre><pre><span style="mso-spacerun: yes">    </span>}</pre><pre>;</pre>

<p class=MsoNormal style='tab-stops:.5in'>Now, suppose we wanted to count the
contents of the object.<span style="mso-spacerun: yes">  </span>We could do
this using the <tt><span style='font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>enumContents()</span></tt> enumerator and an anonymous
function:</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style="mso-spacerun: yes">    </span>local cnt = 0;</pre><pre><span style="mso-spacerun: yes">    </span>myThing.enumContents(new function { ++cnt; });</pre>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>Note that the anonymous function is
accessing the local variable <tt><span style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>cnt</span></tt> from the enclosing
function.<span style="mso-spacerun: yes">  </span>This might seem perfectly
obvious and natural, but it is a very powerful feature of anonymous functions that
traditional function pointers don't offer: with a regular function pointer, the
callback function obviously can't access the local variables of the function
where the pointer is used, so we would have to arrange some other way to share
information.<span style="mso-spacerun: yes">  </span>Anonymous functions make
this information sharing simple by allowing us to share local variables
directly.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>Anonymous functions share not only
the local variables of the scope in which they were defined, but the
&quot;self&quot; object as well.<span style="mso-spacerun: yes">  </span>So, an
anonymous function that appears in a method can refer to the properties of the
&quot;self&quot; object.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>Programmers familiar with languages
such as C or C++ might be concerned about what happens if we create an
anonymous function object that references local variables, and then try to call
the function after the stack frame in which the function was created has been
deactivated.<span style="mso-spacerun: yes">  </span>Consider this example:</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre>myFunc()</pre><pre>{</pre><pre><span style="mso-spacerun: yes">  </span>f = createAnonFunc();</pre><pre><span style="mso-spacerun: yes">  </span>f();<br
style='mso-special-character:line-break'>
<![if !supportLineBreakNewLine]><br style='mso-special-character:line-break'>
<![endif]></pre><pre>}</pre><pre><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></pre><pre>createAnonFunc()<br
style='mso-special-character:line-break'>
<![if !supportLineBreakNewLine]><br style='mso-special-character:line-break'>
<![endif]></pre><pre>{</pre><pre><span style="mso-spacerun: yes">  </span>local i = 100;</pre><pre><span style="mso-spacerun: yes">  </span>return new function() { tadsSay(i); }<br
style='mso-special-character:line-break'>
<![if !supportLineBreakNewLine]><br style='mso-special-character:line-break'>
<![endif]></pre><pre>}</pre>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>This might look like a classic
programming error to a C++ programmer, in that it looks as though we've created
a reference to a stack variable, and then retained the reference even after the
stack variable has ceased to exist.<span style="mso-spacerun: yes"> 
</span>This is a form of the &quot;dangling reference&quot; problem, and can be
very difficult to track down in C++.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>In TADS 3, however, this example is
completely legal, and has well-defined behavior.<span style="mso-spacerun:
yes">  </span>When you create an anonymous function that references local
variables in the enclosing scope, TADS moves the local variables to a
&quot;context object&quot; that is shared between the enclosing scope and the
anonymous functions.<span style="mso-spacerun: yes">  </span>The context object
is shared by reference, so any changes to the local variables made in the
anonymous function affect the enclosing scope, and vice versa.<span
style="mso-spacerun: yes">  </span>The context object is <i>not </i>a
&quot;stack variable,&quot; but is referenced from the activation frame (i.e.,
an internal stack variable) of the enclosing scope, and is also referenced by
the anonymous function.<span style="mso-spacerun: yes">  </span>When the
creating scope returns to its caller, its reference to the context object
disappears, because its activation frame is deleted.<span style="mso-spacerun:
yes">  </span>However, if any anonymous function objects are still reachable,
as in the example above, the local variable context object will remain
reachable through the anonymous function object.<span style="mso-spacerun:
yes">  </span>This means that the lifetimes of the local variables is
automatically extended so that the variables remain valid as long as any
anonymous functions can access them.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>In short, the anonymous function
mechanism is designed to be simple to use, and doesn't come with any warnings
or limitations.</p>

<h3><a name=shortForm>Short-Form Anonymous Functions</a></h3>

<span style='mso-bookmark:shortForm'></span>

<p class=MsoNormal>Even though anonymous functions are already much more
concise for callbacks than traditional functions, TADS 3 provides an even more
concise alternative syntax for situations where you only need to write a simple
expression as the body of the callback function.<span style="mso-spacerun:
yes">  </span>In these cases, you can omit the &quot;new function&quot;
keywords, and write only the parameter list and the expression, enclosed in
braces, with a colon (&quot;:&quot;) separating the expression from the
parameter list.<span style="mso-spacerun: yes">  </span>So, rather than writing
this:</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style="mso-spacerun: yes">  </span>new function(x, y) { return x + y; }</pre>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>we could write this:</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style="mso-spacerun: yes">  </span>{ x, y: x + y }</pre>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>Note that there is no semicolon at the end of the expression:
no semicolon is used because the body of a short-form anonymous function is
simply an expression, not a statement.<span style="mso-spacerun: yes"> 
</span>In TADS, semicolons terminate statements, so since we're not writing a
statement we don't need a semicolon.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>Note that the colon that ends the argument list must <i>always
</i>be present, whether or not there are any parameters.<span
style="mso-spacerun: yes">  </span>So, to write an anonymous function that
takes no arguments, you'd have to put a colon immediately after the opening
brace:</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style="mso-spacerun: yes">  </span>{ : ++cnt }</pre>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>The body of a short-form anonymous function is a single
expression, and the function implicitly returns the value of the
expression.<span style="mso-spacerun: yes">  </span>Note, however, that you can
use the comma operator to create a short-form anonymous function that evaluates
multiple sub-expressions:</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style="mso-spacerun: yes">  </span>{ x, y: tadsSay(x), tadsSay(y), x*y }</pre>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>This example would print out the values of x and y, then
return the product of the two values as the result of the function.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>Short-form and long-form anonymous functions behave in
exactly the same way.<span style="mso-spacerun: yes">  </span>The only
difference is the syntax used to define them.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

</div>

</body>

</html>
