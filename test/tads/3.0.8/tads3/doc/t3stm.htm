<html xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 9">
<meta name=Originator content="Microsoft Word 9">
<link rel=File-List href="./t3stm_files/filelist.xml">
<title>Statements</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Merkin Muffley</o:Author>
  <o:LastAuthor>Dell User</o:LastAuthor>
  <o:Revision>20</o:Revision>
  <o:TotalTime>72</o:TotalTime>
  <o:Created>2000-02-26T00:32:00Z</o:Created>
  <o:LastSaved>2003-05-29T23:17:00Z</o:LastSaved>
  <o:Pages>5</o:Pages>
  <o:Words>2849</o:Words>
  <o:Characters>16240</o:Characters>
  <o:Lines>135</o:Lines>
  <o:Paragraphs>32</o:Paragraphs>
  <o:CharactersWithSpaces>19943</o:CharactersWithSpaces>
  <o:Version>9.2720</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:Zoom>125</w:Zoom>
  <w:DrawingGridHorizontalSpacing>6 pt</w:DrawingGridHorizontalSpacing>
  <w:DrawingGridVerticalSpacing>6 pt</w:DrawingGridVerticalSpacing>
  <w:DisplayVerticalDrawingGridEvery>0</w:DisplayVerticalDrawingGridEvery>
  <w:UseMarginsForDrawingGridOrigin/>
  <w:Compatibility>
   <w:SpaceForUL/>
   <w:BalanceSingleByteDoubleByteWidth/>
   <w:DoNotLeaveBackslashAlone/>
   <w:ULTrailSpace/>
   <w:DoNotExpandShiftReturn/>
   <w:WW6BorderRules/>
   <w:FootnoteLayoutLikeWW8/>
   <w:ShapeLayoutLikeWW8/>
   <w:AlignTablesRowByRow/>
   <w:ForgetLastTabAlignment/>
   <w:AutoSpaceLikeWord95/>
   <w:LayoutRawTableWidth/>
   <w:LayoutTableRowsApart/>
  </w:Compatibility>
 </w:WordDocument>
</xml><![endif]-->
<style>
<!--
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-layout-grid-align:none;
	punctuation-wrap:simple;
	text-autospace:none;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
h1
	{mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:1;
	mso-layout-grid-align:none;
	punctuation-wrap:simple;
	text-autospace:none;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-font-kerning:0pt;
	font-weight:normal;
	font-style:italic;}
h2
	{mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	text-align:center;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:2;
	mso-layout-grid-align:none;
	punctuation-wrap:simple;
	text-autospace:none;
	font-size:10.0pt;
	font-family:"Times New Roman";}
h3
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:3;
	mso-layout-grid-align:none;
	punctuation-wrap:simple;
	text-autospace:none;
	font-size:13.0pt;
	font-family:Arial;}
h4
	{mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:4;
	mso-layout-grid-align:none;
	punctuation-wrap:simple;
	text-autospace:none;
	font-size:10.0pt;
	font-family:"Times New Roman";}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-layout-grid-align:none;
	punctuation-wrap:simple;
	text-autospace:none;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-style:italic;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;
	text-underline:single;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;
	text-underline:single;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-layout-grid-align:none;
	punctuation-wrap:simple;
	text-autospace:none;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";}
tt
	{mso-ascii-font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Courier New";
	mso-bidi-font-family:"Times New Roman";}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
@list l0
	{mso-list-id:817528647;
	mso-list-type:hybrid;
	mso-list-template-ids:1373037316 67698689 67698691 67698693 67698689 67698691 67698693 67698689 67698691 67698693;}
@list l0:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	font-family:Symbol;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>
</head>

<body lang=EN-US link=blue vlink=purple style='tab-interval:.5in'>

<div class=Section1>

<h3 style='tab-stops:.5in'>Statements</h3>

<p class=MsoNormal style='tab-stops:.5in'>TADS 3 has a number of extensions to
the TADS 2 language.<span style="mso-spacerun: yes">  </span>The new language
features provide greater functionality and bring the language syntactically
closer to Java and C.<span style="mso-spacerun: yes">  </span>Some changes from
TADS 2:</p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal style='mso-list:l0 level1 lfo3;tab-stops:list .5in'>The
     &quot;<tt><span style='font-family:"Courier New";mso-bidi-font-family:
     "Times New Roman"'>self.</span></tt>&quot; prefix is <i>never</i> needed
     when evaluating a property or method of <tt><span style='font-family:"Courier New";
     mso-bidi-font-family:"Times New Roman"'>self</span></tt>.<span
     style="mso-spacerun: yes">  </span>The compiler now fully parses the
     source code before resolving symbol references, so the compiler can now <i>always</i>
     tell whether a symbol refers to an object, property, function, or local
     variable.<span style="mso-spacerun: yes">  </span>(In TADS 2, it was
     necessary to use the explicit &quot;<tt><span style='font-family:"Courier New";
     mso-bidi-font-family:"Times New Roman"'>self.</span></tt>&quot; prefix
     when evaluating a property or method that the compiler had not already
     seen earlier in the source code defined as a property.<span
     style="mso-spacerun: yes">  </span>Since this often changed during program
     development, many authors found it necessary to include the explicit
     prefix all the time, resulting in unnecessarily verbose code.<span
     style="mso-spacerun: yes">  </span>The explicit prefix is never needed in
     TADS 3.)</li>
 <li class=MsoNormal style='mso-list:l0 level1 lfo3;tab-stops:list .5in'>Forward
     function declarations are never required, for the same reason that
     explicit &quot;<tt><span style='font-family:"Courier New";mso-bidi-font-family:
     "Times New Roman"'>self.</span></tt>&quot; prefixes are not needed: the
     compiler processes the entire program's source code before resolving
     symbols, so it looks ahead by itself and requires no explicit forward
     declarations.</li>
 <li class=MsoNormal style='mso-list:l0 level1 lfo3;tab-stops:list .5in'>A new <tt><span
     style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>intrinsic</span></tt>
     statement allows for defining <a href="t3intfn.htm">intrinsic function
     sets</a>, which are resolved dynamically at load-time.<span
     style="mso-spacerun: yes">  </span>Because the program's source code can
     now specify the intrinsic functions that a program depends upon, the
     compiler is now completely independent of the function sets, hence the
     compiler will not have to be updated merely for a change to intrinsic
     functions, as it did in TADS 2.<span style="mso-spacerun: yes"> 
     </span>This statement is only needed for function set developers; refer to
     <tt><span style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>tads.h</span></tt>
     or <tt><span style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>t3.h</span></tt>
     for examples, but library and game authors shouldn't need to use this
     statement directly.</li>
 <li class=MsoNormal style='mso-list:l0 level1 lfo3;tab-stops:list .5in'>A new <tt><span
     style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'><a
     href="t3intcl.htm">intrinsic class</a></span></tt> statement allows for
     defining built-in classes, which are resolved dynamically at load-time.</li>
 <li class=MsoNormal style='mso-list:l0 level1 lfo3;tab-stops:list .5in'>Objects,
     classes, and functions can now be declared as external, via the new <tt><span
     style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>extern</span></tt>
     statement, for separate compilation (however, these declarations are
     needed only in certain cases involving libraries, since the compiler will
     automatically set up external symbol definitions when compiling a group of
     source modules together with <tt><span style='font-family:"Courier New";
     mso-bidi-font-family:"Times New Roman"'>t3make</span></tt>).</li>
 <li class=MsoNormal style='mso-list:l0 level1 lfo3;tab-stops:list .5in'>The
     function definition syntax now more closely resembles that of Java and C.</li>
 <li class=MsoNormal style='mso-list:l0 level1 lfo3;tab-stops:list .5in'>The <tt><span
     style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>modify</span></tt>
     keyword can now be used to define a new version of a function that can
     refer to the version it replaces.</li>
 <li class=MsoNormal style='mso-list:l0 level1 lfo3;tab-stops:list .5in'>Method
     definitions now more closely resemble those of Java and C; in particular,
     the equals sign separating a method's argument list from the open brace of
     the method code is no longer used.</li>
 <li class=MsoNormal style='mso-list:l0 level1 lfo3;tab-stops:list .5in'>A
     method taking no arguments can be called with empty parentheses after the
     method name.</li>
 <li class=MsoNormal style='mso-list:l0 level1 lfo3;tab-stops:list .5in'>A call
     to an undefined method can be captured with a new method, <a
     href="t3undef.htm">propNotDefined</a>.</li>
 <li class=MsoNormal style='mso-list:l0 level1 lfo3;tab-stops:list .5in'>Local
     variable declarations can now appear anywhere within a code block.<span
     style="mso-spacerun: yes">  </span>A local variable definition that
     appears in the middle of a code block creates a variable that is in scope
     from that point in the code block to the closing brace of the code
     block.<span style="mso-spacerun: yes">  </span>(TADS 2 only allowed local
     variable declarations at the start of a code block.)</li>
 <li class=MsoNormal style='mso-list:l0 level1 lfo3;tab-stops:list .5in'>A <tt><span
     style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>for</span></tt>
     statement can include local variable declarations in the initializer
     part.<span style="mso-spacerun: yes">  </span>Locals defined in a <tt><span
     style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>for</span></tt>
     statement's initializer are in scope starting with the initializer and
     ending with the end of the body of the <tt><span style='font-family:"Courier New";
     mso-bidi-font-family:"Times New Roman"'>for</span></tt> loop.</li>
 <li class=MsoNormal style='mso-list:l0 level1 lfo3;tab-stops:list .5in'>The <tt><span
     style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>break</span></tt>
     and <tt><span style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>continue</span></tt>
     statements can optionally include labels, which makes it possible for a <tt><span
     style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>break</span></tt>
     or <tt><span style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>continue</span></tt>
     statement to specify a particular enclosing loop to which to apply the
     transfer.<span style="mso-spacerun: yes">  </span>This feature allows a <tt><span
     style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>break</span></tt>
     statement to break out of multiple nested loops (or out of a loop from
     within an embedded <tt><span style='font-family:"Courier New";mso-bidi-font-family:
     "Times New Roman"'>switch</span></tt> statement), and allows a <tt><span
     style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>continue</span></tt>
     to continue with a loop enclosing an inner loop.<span style="mso-spacerun:
     yes">  </span>This feature eliminates nearly all of the places where <tt><span
     style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>goto</span></tt>
     was useful (although <tt><span style='font-family:"Courier New";
     mso-bidi-font-family:"Times New Roman"'>goto</span></tt> is, of course,
     still available).</li>
 <li class=MsoNormal style='mso-list:l0 level1 lfo3;tab-stops:list .5in'>The
     new <tt><span style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>try</span></tt>/<tt><span
     style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>catch</span></tt>/<tt><span
     style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>finally</span></tt>
     and <tt><span style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>throw</span></tt>
     statements provide a structured <a href="t3exc.htm">exception handling
     mechanism</a>.</li>
 <li class=MsoNormal style='mso-list:l0 level1 lfo3;tab-stops:list .5in'>New
     variable argument syntax that allows varying arguments to be handled as
     lists.</li>
 <li class=MsoNormal style='mso-list:l0 level1 lfo3;tab-stops:list .5in'>New
     function and method call syntax that allows you to call a function with a
     list of arguments obtained from a list value, passing each element of the
     list as a separate argument value.</li>
 <li class=MsoNormal style='mso-list:l0 level1 lfo3;tab-stops:list .5in'><a
     href="t3anonfn.htm">Anonymous function</a> syntax that allows you to write
     an in-line unnamed function that can be passed to iteration, enumeration, and
     notification routines.</li>
 <li class=MsoNormal style='mso-list:l0 level1 lfo3;tab-stops:list .5in'>The
     new statement <tt><span style='font-family:"Courier New";mso-bidi-font-family:
     "Times New Roman"'>foreach</span></tt> provides convenient syntax for
     iterating over the contents of a collection.</li>
 <li class=MsoNormal style='mso-list:l0 level1 lfo3;tab-stops:list .5in'>The
     new <tt><span style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'><a
     href="#propertyDecl">property<span style='font-family:"Times New Roman"'>
     statement</span></a></span></tt> allows a program to explicitly define
     property name symbols.</li>
</ul>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><b>External declarations:</b><span
style="mso-spacerun: yes">  </span>In most cases, the compiler will
automatically create the appropriate external symbol definitions for you.<span
style="mso-spacerun: yes">  </span>When you compile a group of modules together
with <tt><span style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>t3make</span></tt>,
the compiler automatically constructs symbol files for all of the modules, and
then reads the symbol files as it compiles each module.<span
style="mso-spacerun: yes">  </span>This allows all of the symbols from all of
the modules to be available when compiling each individual module.<span
style="mso-spacerun: yes">  </span>When you're constructing a library, though,
you obviously won't have access to user-written game modules  you want your
library to work with any user's game module, after all.<span
style="mso-spacerun: yes">  </span>The <tt><span style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>extern</span></tt> statement addresses
this situation by allowing you to explicitly declare the functions, objects,
and classes that you require the user-written code to provide.<span
style="mso-spacerun: yes">  </span>The syntax is:</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style="mso-spacerun: yes">    </span>extern function <i>function_name</i>(<i>arg1, arg2, arg3</i>);</pre><pre><span style="mso-spacerun: yes">    </span>extern object <i>object_name</i>;</pre><pre><span style="mso-spacerun: yes">    </span>extern class <i>class_name</i>;</pre>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><b>Function definition syntax:</b><span
style="mso-spacerun: yes">  </span>The function syntax used in TADS 2 is now
obsolete; you should use the new syntax, which more closely resembles the
syntax that Java and C use.</p>

<pre><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></pre><pre><span style="mso-spacerun: yes">    </span><i>function_name</i>(<i>arg1, arg2, arg3</i>)</pre><pre><span style="mso-spacerun: yes">    </span>{</pre><pre><span style="mso-spacerun: yes">        </span><i>function_body;<o:p></o:p></i></pre><pre><span style="mso-spacerun: yes">    </span>}</pre>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><a name=propertyDecl></a><a
name=modifyFunction></a><b>Modifying functions:</b><span style="mso-spacerun:
yes">  </span>The <tt><span style='font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>modify</span></tt> keyword can be used in a function
definition.<span style="mso-spacerun: yes">  </span>Modifying a function is
just like replacing it (using the <tt><span style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>replace</span></tt> keyword), except
that the new definition of the function can invoke the old definition of the
function (i.e., the definition that's being replaced).<span
style="mso-spacerun: yes">  </span>This allows the program to apply incremental
changes to a function, such as adding new special cases, without the need to
copy the full text of the original function.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>To invoke the previous definition of
the function, use the <tt><span style='font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>replaced</span></tt> keyword.<span style="mso-spacerun:
yes">  </span>This keyword is syntactically like the name of a function, so you
can put a parenthesized argument list after it to invoke the past function, and
you can simply use the replaced keyword by itself to obtain a pointer to the
old function.<span style="mso-spacerun: yes">  </span>Here's an example.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style="mso-spacerun: yes">    </span>getName(val)</pre><pre><span style="mso-spacerun: yes">    </span>{</pre><pre><span style="mso-spacerun: yes">      </span>switch(dataType(val))</pre><pre><span style="mso-spacerun: yes">      </span>{</pre><pre><span style="mso-spacerun: yes">      </span>case TypeObject:</pre><pre><span style="mso-spacerun: yes">        </span>return val.name;</pre><pre><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></pre><pre><span style="mso-spacerun: yes">      </span>default:</pre><pre><span style="mso-spacerun: yes">        </span>return 'unknown';</pre><pre><span style="mso-spacerun: yes">    </span>}</pre><pre><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></pre><pre><span style="mso-spacerun: yes">    </span>// later, or in a separate source module</pre><pre><span style="mso-spacerun: yes">    </span>modify getName(val)</pre><pre><span style="mso-spacerun: yes">    </span>{</pre><pre><span style="mso-spacerun: yes">      </span>if (dataType(val) == TypeSString)</pre><pre><span style="mso-spacerun: yes">        </span>return '\'' + val + '\'';</pre><pre><span style="mso-spacerun: yes">      </span>else</pre><pre><span style="mso-spacerun: yes">        </span>return replaced(val);</pre><pre><span style="mso-spacerun: yes">    </span>}</pre>

<p class=MsoNormal style='tab-stops:.5in'><b><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></b></p>

<p class=MsoNormal style='tab-stops:.5in'>Note how the modified function refers
back to the original version: we add handling for string values, which the
original definition didn't provide, but simply invoke the original version of
the function for any other type.<span style="mso-spacerun: yes">  </span>The
call to <tt><span style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>replaced(val)</span></tt>
invokes the previous definition of the function, which we're replacing.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>Once a function is redefined using <tt><span
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>modify</span></tt>,
it's no longer possible to invoke the old definition of the function directly
by name.<span style="mso-spacerun: yes">  </span>The only way to reach the old
definition is via the <tt><span style='font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>replaced</span></tt> keyword, and that can only be used
within the new definition of the function.<span style="mso-spacerun: yes"> 
</span>However, note that you can obtain a pointer to the old function, and
then invoke the old function through that pointer outside the bounds of the
redefinition.</p>

<pre style='tab-stops:.5in'><span style='font-family:"Times New Roman"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre>

<p class=MsoNormal style='tab-stops:.5in'><b>Explicit property
declarations:<span style="mso-spacerun: yes">  </span></b>A program can now
explicitly declare property name symbols using the <tt><span style='font-family:
"Courier New";mso-bidi-font-family:"Times New Roman"'>property</span></tt>
statement:</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style="mso-spacerun: yes">    </span>property <i>prop1 </i>[, <i>prop2 </i>[...]] ;</pre>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>This statement declares each listed
symbol as a property.<span style="mso-spacerun: yes">  </span>Programs are not
required to declare properties names, but it is occasionally useful to be able
to do so.<span style="mso-spacerun: yes">  </span>This is especially useful in
libraries, because it is common in library code to call out to a method that
the library requires the user code to provide in one of its own objects but
which the library does not itself define.<span style="mso-spacerun: yes"> 
</span>In such cases, when the library is compiled on its own (by the library
author, not yet linking to user code), the compiler will generate a warning
message about an undefined property if the property is not defined anywhere in
the library code.<span style="mso-spacerun: yes">  </span>This new syntax
allows the library programmer to declare the symbols explicitly, which not only
suppresses the warning message from the compiler, but also makes the meaning of
the symbols clear to readers of the library source code.</p>

<p class=MsoNormal style='tab-stops:.5in'><b><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></b></p>

<p class=MsoNormal style='tab-stops:.5in'><b>Object method definition syntax:</b><span
style="mso-spacerun: yes">  </span>The syntax for defining methods in objects
has changed slightly from TADS 2.<span style="mso-spacerun: yes">  </span>For
more consistency with Java and C++ method declarations, the equals sign
(&quot;=&quot;) that TADS 2 used to separate the method's argument list from
the method body has been eliminated.<span style="mso-spacerun: yes"> 
</span>The equals sign is still used for a simple property with a value.<span
style="mso-spacerun: yes">  </span>Here's an example:</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style="mso-spacerun: yes">    </span>MyObject: object</pre><pre><span style="mso-spacerun: yes">        </span>sdesc = &quot;my object&quot;<span style="mso-spacerun: yes">    </span>// use '=' for property values</pre><pre><span style="mso-spacerun: yes">        </span>doInspect(actor)<span style="mso-spacerun: yes">       </span>// but not for methods</pre><pre><span style="mso-spacerun: yes">        </span>{</pre><pre><span style="mso-spacerun: yes">            </span>&quot;It's a pretty ordinary-looking object.&quot;;</pre><pre><span style="mso-spacerun: yes">        </span>}</pre><pre><span style="mso-spacerun: yes">        </span>doOpen() { &quot;Okay.&quot;; }<span style="mso-spacerun: yes">  </span>// no '=' even with no arguments</pre><pre><span style="mso-spacerun: yes">        </span>doClose { &quot;Done.&quot;; }<span style="mso-spacerun: yes">   </span>// same here</pre><pre><span style="mso-spacerun: yes">    </span>;</pre>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>Note that calls to <tt><span
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>doOpen</span></tt>
and <tt><span style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>doClose</span></tt>
in this example would allow empty parentheses after the method name but don't
require them.<span style="mso-spacerun: yes">  </span>The language doesn't
distinguish between an empty argument list and no argument list in this
situation.<span style="mso-spacerun: yes">  </span>So, you could make a call to
either <tt><span style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>MyObject.doOpen</span></tt>
or <tt><span style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>MyObject.doOpen()</span></tt>,
and both would behave the same way.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>For more details, refer to the <a
href="t3obj.htm">Object Definitions</a> section.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><b>Locals in a </b><tt><b><span
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>for</span></b></tt><b>
initializer:</b><span style="mso-spacerun: yes">  </span>You can define new
local variables in the initializer part of a <tt><span style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>for</span></tt> statement by using the <tt><span
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>local</span></tt>
keyword in the initializer.<span style="mso-spacerun: yes">  </span>For
example:</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style="mso-spacerun: yes">    </span>for (i = 1, local j = 3, local k = 4, l = 5 ; i &lt; 5 ; ++i) // ...</pre>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>This declares two new local
variables, <tt><span style='font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>j</span></tt> and <tt><span style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>k</span></tt>, and uses the existing
variables <tt><span style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>i</span></tt>
and <tt><span style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>l</span></tt>.<span
style="mso-spacerun: yes">  </span>Note that <tt><span style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>l</span></tt> is <i>not</i> a new
local, even though it comes after the <tt><span style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>local k</span></tt> definition, because
each <tt><span style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>local</span></tt>
keyword in a <tt><span style='font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>for</span></tt> initializer defines only one variable.<span
style="mso-spacerun: yes">  </span>Note also that an initial value assignment
is required for each new local declared.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>The new locals declared in a <tt><span
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>for</span></tt>
initializer are local in scope to the <tt><span style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>for</span></tt> statement and its body
(this is the same rule that Java uses, although note that it differs from the
(undesirable) way C++ works).<span style="mso-spacerun: yes">  </span>The
effect is exactly as though an extra open brace (&quot;{&quot;) followed by a <tt><span
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>local</span></tt>
statement for each new local appeared immediately before the <tt><span
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>for</span></tt>
statement, and an extra close brace (&quot;}&quot;) appeared immediately after
the end of the body of the loop.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>Note that this new feature changes
the formal syntax of the <tt><span style='font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>for</span></tt> initializer in a subtle way:</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><i>for_statement</i>: for ( <i>for_init </i>; <i>for_condition</i> ; <i>for_reinit</i> ) <i>body<o:p></o:p></i></pre><pre><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></pre><pre><i>for_init</i>:<span style="mso-spacerun: yes">  </span><i>for_init_item </i>, <i>for_init</i></pre><pre><span style="mso-spacerun: yes">        </span>|<span style="mso-spacerun: yes">  </span><i>for_init_item</i></pre><pre><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></pre><pre><i>for_init_item</i>:<span style="mso-spacerun: yes">  </span><i>assignment_expr</i></pre><pre><span style="mso-spacerun: yes">             </span>|<span style="mso-spacerun: yes">  </span>local <i>symbol</i> = <i>assignment_expr<o:p></o:p></i></pre>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>The subtle change is that a for
initializer (<tt><i><span style='font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>for_init</span></i></tt>) was, in TADS 2, simply a comma
expression, but it is now a series of one or more initializer items separated
by commas, where each initializer item is either a local variable declaration
or an assignment expression.<span style="mso-spacerun: yes">  </span>Apart from
the new ability to declare new local variables, this syntax change has no
practical effect, since a series of assignment expressions separated by commas
is identical to a comma expression.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><b>Labeled </b><tt><b><span
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>break</span></b></tt><b>
and </b><tt><b><span style='font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>continue</span></b></tt><b>:</b><span style="mso-spacerun:
yes">  </span>The <tt><span style='font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>break</span></tt> and <tt><span style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>continue</span></tt> statements can
optionally specify a target label.<span style="mso-spacerun: yes">  </span>When
a label is used with one of these statements, it must refer to a statement that
encloses the <tt><span style='font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>break</span></tt> or <tt><span style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>continue</span></tt>.<span
style="mso-spacerun: yes">  </span>In the case of <tt><span style='font-family:
"Courier New";mso-bidi-font-family:"Times New Roman"'>continue</span></tt>, the
label must refer directly to a loop statement: a <tt><span style='font-family:
"Courier New";mso-bidi-font-family:"Times New Roman"'>for</span></tt>, <tt><span
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>while</span></tt>,
or <tt><span style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>do</span></tt>-<tt><span
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>while</span></tt>
statement.<span style="mso-spacerun: yes">  </span>The target of a <tt><span
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>break</span></tt>
may be any enclosing statement.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>When a label is used with <tt><span
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>break</span></tt>,
the statement transfers control to the statement immediately following the
labeled statement.<span style="mso-spacerun: yes">  </span>If the target statement
is a loop, control transfers to the statement following the loop body.<span
style="mso-spacerun: yes">  </span>If the target is a compound statement (a
group of statements enclosed in braces), control transfers to the next
statement after the block's closing brace.<span style="mso-spacerun: yes"> 
</span>Targeted <tt><span style='font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>break</span></tt> statements are especially useful when you
want to break out of a loop from within a switch statement:</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre>scanLoop:</pre><pre><span style="mso-spacerun: yes">    </span>for (i = 1 ; i &lt; 10 ; ++i)</pre><pre><span style="mso-spacerun: yes">    </span>{</pre><pre><span style="mso-spacerun: yes">        </span>switch(val[i])</pre><pre><span style="mso-spacerun: yes">        </span>{</pre><pre><span style="mso-spacerun: yes">        </span>case '+':</pre><pre><span style="mso-spacerun: yes">            </span>++sum;</pre><pre><span style="mso-spacerun: yes">            </span>break;</pre><pre><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></pre><pre><span style="mso-spacerun: yes">        </span>case '-':</pre><pre> <span style="mso-spacerun: yes">           </span>--sum;</pre><pre><span style="mso-spacerun: yes">            </span>break;</pre><pre><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></pre><pre><span style="mso-spacerun: yes">        </span>case 'eof':</pre><pre><span style="mso-spacerun: yes">            </span>break scanLoop;</pre><pre><span style="mso-spacerun: yes">        </span>}</pre><pre><span style="mso-spacerun: yes">    </span>}</pre>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>Targeted <tt><span style='font-family:
"Courier New";mso-bidi-font-family:"Times New Roman"'>break</span></tt>
statements are also useful for breaking out of nested loops:</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre>matchLoop:</pre><pre><span style="mso-spacerun: yes">    </span>for (i = 1 ; i &lt;= val.length() ; ++i)</pre><pre><span style="mso-spacerun: yes">    </span>{</pre><pre><span style="mso-spacerun: yes">        </span>for (j = 1 ; j &lt; i ; ++j)</pre><pre><span style="mso-spacerun: yes">        </span>{</pre><pre><span style="mso-spacerun: yes">            </span>if (val[i] == val[j])</pre><pre><span style="mso-spacerun: yes">                </span>break matchLoop;</pre><pre><span style="mso-spacerun: yes">        </span>}</pre><pre><span style="mso-spacerun: yes">    </span>}</pre>

<p class=MsoNormal style='tab-stops:.5in'><a name="_Exceptions"></a><a
name="_Intrinsic_Classes"></a><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><b>Varying arguments as lists:</b><span
style="mso-spacerun: yes">  </span>New syntax allows a function that takes a varying
number of arguments to receive the varying part of the argument list as a named
list parameter, rather than using the traditional <tt><span style='font-family:
"Courier New";mso-bidi-font-family:"Times New Roman"'>getarg()</span></tt>
mechanism.<span style="mso-spacerun: yes">  </span>To declare a function or
method taking varying arguments as a list of values, replace the ellipsis with
the list parameter name enclosed in square brackets:</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre>// old way: formatStr(fmt, ...)</pre><pre>// new way:</pre><pre>formatStr(fmt, [vals]) { /* function body */ }</pre>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>This declares a function that takes
one or more arguments.<span style="mso-spacerun: yes">  </span>The first
argument is named <tt><span style='font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>fmt</span></tt>, and all of the remaining arguments are
placed into a list named <tt><span style='font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>vals</span></tt>.<span style="mso-spacerun: yes">  </span>If
the function is called with a single argument, <tt><span style='font-family:
"Courier New";mso-bidi-font-family:"Times New Roman"'>vals</span></tt> will
contain an empty list, because there are no arguments after <tt><span
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>fmt</span></tt>.<span
style="mso-spacerun: yes">  </span>If the function is called with two
arguments, <tt><span style='font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>vals</span></tt> will be a list containing the second
argument value.<span style="mso-spacerun: yes">  </span>If the function is
called with four arguments, <tt><span style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>vals</span></tt> will be a list whose
elements are (in order) the second, third, and fourth argument values.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>This new syntax works the same as the
traditional <tt><span style='font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>getarg()</span></tt> mechanism, and in fact you can still
use <tt><span style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>getarg()</span></tt>
to retrieve the argument values even if the new syntax is used to declare a
function.<span style="mso-spacerun: yes">  </span>The new syntax is simply an
alternative notation that in many cases facilitates more readable code.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>Of course, the old ellipsis notation
is still supported, so you can still write variable-argument functions using
the traditional notation if you prefer.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<h4 style='tab-stops:.5in'>Lists as variable arguments:<span
style="mso-spacerun: yes">  </span><span style='font-weight:normal'>In addition
to being able to receive varying arguments as a list, you can pass a list value
as though it were a list of individual argument values.<span
style="mso-spacerun: yes">  </span>To do this, place an ellipsis after the list
argument value in the function or method call's argument list:<o:p></o:p></span></h4>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style="mso-spacerun: yes">   </span>local lst = [1, 2, 3];</pre><pre><span style="mso-spacerun: yes">   </span>formatStr('x[%d, %d] = %d', lst...);</pre>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>Rather than passing two arguments to <tt><span
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>formatStr()</span></tt>
(i.e., a string and a four-element list), this passes four arguments (a string,
the integer 1, the integer 2, and the integer 3), as though all four had been
passed as separate arguments  in other words, the call is identical to this:</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style="mso-spacerun: yes">   </span>formatStr('x[%d, %d] = %d', 1, 2, 3);</pre>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>This notation allows you to call a
function taking a variable argument list given a list value.<span
style="mso-spacerun: yes">  </span>This makes it possible to layer calls to
functions and methods with variable argument lists, since an intermediate function
can itself take a variable argument list and later pass the same arguments to
another variable argument function.<span style="mso-spacerun: yes"> 
</span>This type of layering was not possible in TADS 2, since there was no way
for code to pass a variable argument list obtained from its caller when calling
a function or method.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><a name=foreach></a><b>The foreach
statement:<span style="mso-spacerun: yes">  </span></b>The new statement <tt><span
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>foreach</span></tt>
provides a convenient syntax for writing a loop over the contents of a
collection, such as a list or a Vector.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>The syntax of the <tt><span
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>foreach</span></tt>
statement is:</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style="mso-spacerun: yes">   </span>foreach ( <i>foreach_lvalue </i>in <i>expression</i> ) <i>body<o:p></o:p></i></pre>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>The <i>foreach_lvalue</i> specifies a
local variable or other &quot;lvalue&quot; expression which serves as the
looping variable.<span style="mso-spacerun: yes">  </span>This can be any
lvalue (any expression that can be used on the left-hand side of an assignment
operator), or it can be the keyword <tt><span style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>local</span></tt> followed by the name
of a new local variable; if <tt><span style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>local</span></tt> is used, a new local
variable is created with scope local to the <tt><span style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>foreach</span></tt> statement and its
body.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>The <i>expression </i>is any
expression that evaluates to a <a href="t3coll.htm">Collection</a> object, such
as a list or Vector value.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>The statement loops over the elements
of the collection.<span style="mso-spacerun: yes">  </span>For each element,
the statement assigns the current element to the lvalue, then executes the
body.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>Here's an example that displays the elements
of a list.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style="mso-spacerun: yes">   </span>local lst = [1, 2, 3, 4, 5];</pre><pre><span style="mso-spacerun: yes">   </span>foreach (local x in lst)</pre><pre><span style="mso-spacerun: yes">      </span>&quot;&lt;&lt;x&gt;&gt;\n&quot;;<span
style='font-family:"Times New Roman"'><o:p></o:p></span></pre>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>The <tt><span style='font-family:
"Courier New";mso-bidi-font-family:"Times New Roman"'>foreach</span></tt>
statement uses the <a href="t3coll.htm">Collection</a> intrinsic class's
createIterator() method to create an <a href="t3iter.htm">Iterator</a> object
for the collection expression, then uses the Iterator object's getNext() method
to traverse the elements of the collection.<span style="mso-spacerun: yes"> 
</span>Therefore, the order in which the statement visits the elements of the
collection is exactly the same as the order used by the Iterator for the
collection.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>Note that, because the <tt><span
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>foreach</span></tt>
statement uses the Collection.createIterator() method to create the iterator,
the iteration uses a &quot;snapshot&quot; of the collection created at the
start of the loop.<span style="mso-spacerun: yes">  </span>Because the iterator
uses this frozen snapshot, changes made to the collection during the loop will
not affect the iteration.<span style="mso-spacerun: yes">  </span>For example,
consider the following:</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style="mso-spacerun: yes">   </span>local i = 1;</pre><pre><span style="mso-spacerun: yes">   </span>local vec = new Vector(10).fillValue(nil, 1, 10).applyAll({x: i++});</pre><pre><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></pre><pre><span style="mso-spacerun: yes">   </span>foreach (local x in vec)</pre><pre> <span style="mso-spacerun: yes">  </span>{</pre><pre><span style="mso-spacerun: yes">      </span>vec.applyAll({v: v+1});</pre><pre><span style="mso-spacerun: yes">      </span>&quot;&lt;&lt;x&gt;&gt;\n&quot;;<br
style='mso-special-character:line-break'>
<![if !supportLineBreakNewLine]><br style='mso-special-character:line-break'>
<![endif]></pre><pre><span style="mso-spacerun: yes">   </span>}</pre>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>The first two lines create a vector
and initialize its elements to the integers 1 through 10, using the applyAll
method of the vector.<span style="mso-spacerun: yes">  </span>The <tt><span
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>foreach</span></tt>
body modifies the entire vector  adding 1 to every element  then prints out
the current value.<span style="mso-spacerun: yes">  </span>At first glance, we
might expect the values displayed to be something like this:<span
style="mso-spacerun: yes">  </span>1, 3, 5, 7, 9; we might expect this because
of the applyAll() call updates every element of the vector on every iteration
of the loop.<span style="mso-spacerun: yes">  </span>This isn't what happens,
though: because the <tt><span style='font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>foreach</span></tt> statement iterates over a frozen
snapshot of the vector, we actually print out the original contents of the
vector:<span style="mso-spacerun: yes">  </span>1, 2, 3, 4, and so on.<span
style="mso-spacerun: yes">  </span>After we're finished with the iteration,
though, if we look at the vector, we'll find it modified as we'd expect.<span
style="mso-spacerun: yes">  </span>In addition, even within the loop, if we
were to refer directly to the vector through the variable <tt><span
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>vec</span></tt>,
we'd find it modified as we'd expect  the snapshot pertains only the iteration
variable, and doesn't &quot;freeze&quot; the vector itself.<span
style="mso-spacerun: yes">  </span>To see this, consider this more complex
example:</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style="mso-spacerun: yes">   </span>local i = 1;</pre><pre><span style="mso-spacerun: yes">   </span>local vec = new Vector(10).fillValue(0, 1, 10).applyAll({x: i++});</pre><pre><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></pre><pre><span style="mso-spacerun: yes">   </span>i = 1;</pre><pre><span style="mso-spacerun: yes">   </span>foreach (local x in vec)</pre><pre><span style="mso-spacerun: yes">   </span>{</pre><pre><span style="mso-spacerun: yes">      </span>vec.applyAll({v: v+1});</pre><pre><span style="mso-spacerun: yes">      </span>&quot;x = &lt;&lt;x&gt;&gt;, vec[&lt;&lt;i&gt;&gt;] = &lt;&lt;vec[i]&gt;&gt;\n&quot;;</pre><pre><span style="mso-spacerun: yes">      </span>++i;<br
style='mso-special-character:line-break'>
<![if !supportLineBreakNewLine]><br style='mso-special-character:line-break'>
<![endif]></pre><pre><span style="mso-spacerun: yes">   </span>}</pre>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>This would display the following,
showing that the vector has been modified  and the modifications are visible
within the loop  even though the modifications are <i>not </i>visible to the
iteration variable:</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style="mso-spacerun: yes">   </span>x = 1, vec[1] = 2</pre><pre><span style="mso-spacerun: yes">   </span>x = 2, vec[2] = 4</pre><pre><span style="mso-spacerun: yes">   </span>x = 3, vec[3] = 6</pre><pre><span style="mso-spacerun: yes">   </span>x = 4, vec[4] = 8</pre><pre><span style="mso-spacerun: yes">   </span>x = 5, vec[5] = 10</pre><pre><span style="mso-spacerun: yes">   </span>x = 6, vec[6] = 12</pre><pre><span style="mso-spacerun: yes">   </span>x = 7, vec[7] = 14</pre><pre><span style="mso-spacerun: yes">   </span>x = 8, vec[8] = 16</pre><pre><span style="mso-spacerun: yes">   </span>x = 9, vec[9] = 18</pre><pre><span style="mso-spacerun: yes">   </span>x = 10, vec[10] = 20</pre>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>Although we've belabored this
snapshot behavior as though it were some pitfall you must take care to avoid,
it should be emphasized that, in most practical cases, this feature relieves
you from having to worry about how the iteration will proceed.<span
style="mso-spacerun: yes">  </span>Even if you're making changes to the
contents of the collection during the loop, you can be confident that they'll
have no effect on the iteration.<span style="mso-spacerun: yes">  </span>The
snapshot feature makes it easy to iterate over collections without having to
worry about the details of how changes would affect the order of the elements,
or the number of elements, or anything else.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

</div>

</body>

</html>
