<html xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 9">
<meta name=Originator content="Microsoft Word 9">
<link rel=File-List href="./t3list_files/filelist.xml">
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Merkin Muffley</o:Author>
  <o:LastAuthor>Unknown User</o:LastAuthor>
  <o:Revision>40</o:Revision>
  <o:TotalTime>141</o:TotalTime>
  <o:Created>2000-03-21T23:01:00Z</o:Created>
  <o:LastSaved>2002-02-17T04:49:00Z</o:LastSaved>
  <o:Pages>3</o:Pages>
  <o:Words>2034</o:Words>
  <o:Characters>11595</o:Characters>
  <o:Lines>96</o:Lines>
  <o:Paragraphs>23</o:Paragraphs>
  <o:CharactersWithSpaces>14239</o:CharactersWithSpaces>
  <o:Version>9.3821</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:Zoom>125</w:Zoom>
  <w:DrawingGridHorizontalSpacing>6 pt</w:DrawingGridHorizontalSpacing>
  <w:DrawingGridVerticalSpacing>6 pt</w:DrawingGridVerticalSpacing>
  <w:DisplayVerticalDrawingGridEvery>0</w:DisplayVerticalDrawingGridEvery>
  <w:UseMarginsForDrawingGridOrigin/>
  <w:Compatibility>
   <w:SpaceForUL/>
   <w:BalanceSingleByteDoubleByteWidth/>
   <w:DoNotLeaveBackslashAlone/>
   <w:ULTrailSpace/>
   <w:DoNotExpandShiftReturn/>
   <w:WW6BorderRules/>
   <w:FootnoteLayoutLikeWW8/>
   <w:ShapeLayoutLikeWW8/>
   <w:AlignTablesRowByRow/>
   <w:ForgetLastTabAlignment/>
   <w:AutoSpaceLikeWord95/>
   <w:LayoutRawTableWidth/>
   <w:LayoutTableRowsApart/>
  </w:Compatibility>
 </w:WordDocument>
</xml><![endif]-->
<style>
<!--
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-layout-grid-align:none;
	punctuation-wrap:simple;
	text-autospace:none;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
h3
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:3;
	mso-layout-grid-align:none;
	punctuation-wrap:simple;
	text-autospace:none;
	font-size:13.0pt;
	font-family:Arial;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;
	text-underline:single;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;
	text-underline:single;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-layout-grid-align:none;
	punctuation-wrap:simple;
	text-autospace:none;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
-->
</style>
</head>

<body lang=EN-US link=blue vlink=purple style='tab-interval:.5in'>

<div class=Section1>

<h3>The List Intrinsic Class</h3>

<p class=MsoNormal>&quot;List&quot; is a native TADS 3 datatype.<span
style="mso-spacerun: yes">  </span>Lists are actually instances of the
intrinsic class List, which means that you can call methods defined by the List
intrinsic class on list objects.</p>

<h3><a name=valueSemantics></a>Value Semantics</h3>

<p class=MsoNormal>Lists have &quot;value semantics,&quot; which means that a
given list value is immutable.<span style="mso-spacerun: yes">  </span>Any
operation that appears to modify a list value is actually creating a <i>new </i>list
value, and leaving the original value unchanged.<span style="mso-spacerun:
yes">  </span>This behavior makes it very easy to work with lists, because you
never have to worry about how many variables or properties refer to a list –
even if several variables refer to a list value, each variable effectively has
its own private copy of the list, so changes made to one variable's list won't
affect any others.<span style="mso-spacerun: yes">  </span>This also means that
you can pass a list to a function without having to worry about whether the
function will modify the list, and similarly that you can modify a list passed
in as an argument to your functions without having to worry about how the
changes will affect the caller.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>This is discussed in more detail in the <a
href="t3vector.htm">Vector intrinsic class section</a>.</p>

<h3>List Iterations</h3>

<p class=MsoNormal>A List is a subclass of <a href="t3coll.htm">Collection</a>,
so you can use the createIterator() method to create an <a href="t3iter.htm">Iterator</a>
to iterate over the elements of the list.<span style="mso-spacerun: yes"> 
</span>The Iterator that a List creates is called an IndexedIterator, and
visits the elements of the list in index order (the first element visited is
the element at index 1, the second is the element at index 2, and so forth).</p>

<h3>List Methods</h3>

<p class=MsoNormal>List is a subclass of Collection, and thus defines the <a
href="t3coll.htm">Collection methods</a>.<span style="mso-spacerun: yes"> 
</span>In addition, List defines the methods shown below.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><a name=append></a><b>append(<i>val</i>)
– </b>appends the value <i>val </i>to this list, returning the resulting
list.<span style="mso-spacerun: yes">  </span>This is almost the same as using
the &quot;+&quot; operator to append <i>val </i>to the list, but differs in
that this method always treats <i>val </i>as a single new element, even if <i>val</i>
is a list.<span style="mso-spacerun: yes">  </span>Consider the following:</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style="mso-spacerun: yes">   </span>local x = [1, 2, 3];</pre><pre><span style="mso-spacerun: yes">   </span>local y = x + [4, 5];</pre><pre><span style="mso-spacerun: yes">   </span>local z = x.append([4, 5]);</pre>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>In this example, the value of y is the
list [1, 2, 3, 4, 5]: if the value on the right of a &quot;+&quot; operator is
a list, the &quot;+&quot; operator appends each value of the list as a separate
element.<span style="mso-spacerun: yes">  </span>In contrast, the value of z is
[1, 2, 3, [4, 5]], because the append() method always treats its argument as a
single element of the new list.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>Note that you can achieve the same
effect using the &quot;+&quot; operator by constructing a new list for the
right operand:</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style="mso-spacerun: yes">   </span>local y2 = x + [[4, 5]];</pre>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>This will ensure that the value of y2
is the same as the value of z: [1, 2, 3, [4, 5]].<span style="mso-spacerun:
yes">  </span>However, the append() method is more efficient than constructing
a new list for the right operand of &quot;+&quot;, because it is not necessary
to construct the intermediate list using append().</p>

<p class=MsoNormal style='tab-stops:.5in'><b><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></b></p>

<p class=MsoNormal style='tab-stops:.5in'><a name=appendUnique></a><b>appendUnique(<i>lst</i>)
– </b>appends the elements of the list <i>lst </i>to this list, returning a new
list consisting only of the unique elements of the combination.<span
style="mso-spacerun: yes">  </span>Each value appearing in the result list will
appear in the result list only once.<span style="mso-spacerun: yes"> 
</span>(The same effect could be obtained by concatenating the two lists with
the &quot;+&quot; operator then applying getUnique() to the result, but this
method is more efficient because it avoids constructing the fully concatenated
list as an intermediate value.)</p>

<p class=MsoNormal style='tab-stops:.5in'><b><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></b></p>

<p class=MsoNormal style='tab-stops:.5in'><b>car()</b> – returns the first
element of the list.<span style="mso-spacerun: yes">  </span>If the list has no
elements, returns nil.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><b>cdr()</b> – returns the
&quot;tail&quot; of the list; that is, the rest of the list after removing the
first element.<span style="mso-spacerun: yes">  </span>If the list has no
elements, returns nil.<span style="mso-spacerun: yes">  </span>This function is
almost the same as sublist(2), except that sublist() would return an empty list
if given an empty list, whereas cdr() returns nil in this case.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><b>countOf(<i>val</i>) – </b>returns
the number of elements whose values equal <i>val</i>.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><b>countWhich(<i>cond</i>) – </b>returns
the number of elements for which the callback function <i>cond</i> returns a
non-false value (anything but nil or 0).<span style="mso-spacerun: yes"> 
</span>For each element, this method calls the callback, passing the current
element as the argument.<span style="mso-spacerun: yes">  </span>If the
callback returns anything but nil or 0, the method counts the element.<span
style="mso-spacerun: yes">  </span>After invoking the callback for each
element, the method returns the resulting count.</p>

<p class=MsoNormal style='tab-stops:.5in'><b><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></b></p>

<p class=MsoNormal style='tab-stops:.5in'><b>indexOf(<i>val</i>) – </b>returns
the index of the first element of the list equal to the given value.<span
style="mso-spacerun: yes">  </span>If <i>val</i> does not appear anywhere in
the list, the method returns nil.<span style="mso-spacerun: yes">  </span>The
first element is at index 1.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><a name=findWhere></a><b>indexWhich(<i>cond</i>)
– </b>finds the first element for which the given condition is true.<span
style="mso-spacerun: yes">  </span>The method iterates through the elements of
the list, starting at the first element and proceeding in order, and applies
the callback function <i>cond</i> to each element.<span style="mso-spacerun:
yes">  </span>The callback takes one argument, which is the value of the list
element, and returns a condition result value.<span style="mso-spacerun: yes"> 
</span>For each element, if the callback function returns a non-false value
(i.e., any value except nil or zero), the method immediately stops the iteration
and returns the index of that element.<span style="mso-spacerun: yes"> 
</span>If the callback returns a false value (nil or zero) for every element of
the list, the method returns nil.</p>

<p class=MsoNormal style='tab-stops:.5in'><b><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></b></p>

<p class=MsoNormal style='tab-stops:.5in'><a name=forEach></a><b>forEach(<i>func</i>)
– </b>invokes the callback function <i>func</i>(<i>value</i>) for each element,
in order from first to last, passing the value of one element as <i>value</i>
to the callback on each invocation.<span style="mso-spacerun: yes">  </span>The
callback function takes one argument, which is the current element, and returns
no value.<span style="mso-spacerun: yes">  </span>This method returns no
value.<span style="mso-spacerun: yes">  </span>This method is a convenient
means of executing some code for each element of the list.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><b>forEachAssoc(<i>func</i>) – </b>invokes
the callback function <i>func</i>(<i>index, value</i>) for each element, in
order from first to last, passing each element's index and value to the
function <i>func</i>.<span style="mso-spacerun: yes">  </span>The callback
function returns no value.<span style="mso-spacerun: yes">  </span>This method
returns no value.<span style="mso-spacerun: yes">  </span>This method is a
convenient means of executing some code for each element of the list; unlike
forEach(), this method provides its callback with the index as well as the
value for each element it visits.</p>

<p class=MsoNormal style='tab-stops:.5in'><b><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></b></p>

<p class=MsoNormal style='tab-stops:.5in'><b>getUnique() – </b>returns a new
list consisting of the unique elements of the original list.<span
style="mso-spacerun: yes">  </span>For each value in the original list, the
value will appear in the new list only once.<span style="mso-spacerun: yes"> 
</span>The order of the elements in the new list is that of the first
appearances of the unique elements of the original list.<span
style="mso-spacerun: yes">  </span>For example, if the original list is [1, 5,
2, 5, 3, 5, 4, 5], this method will return [1, 5, 2, 3, 4].</p>

<p class=MsoNormal style='tab-stops:.5in'><b><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></b></p>

<p class=MsoNormal style='tab-stops:.5in'><b>insertAt(<i>index, val1, val2, …</i>)
– </b>returns a new list which results from inserting the given values (<i>val1</i>,
<i>val2</i>, and so on) into the existing list before the element at the
position given by <i>index</i>.<span style="mso-spacerun: yes">  </span>At
least one value argument is required; if multiple value arguments are provided,
the values are inserted into the list in the same order in which they appear in
the arguments.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>If <i>index</i> is 1, the values are
inserted before the first element of the existing list (this means that
insertAt(1, x) is equivalent to prepend(x)), and if <i>index</i> is equal to
the number of elements in the original list plus 1, the values are inserted
after the last element of the existing list (so lst.insertAt(lst.length() + 1,
x) is equivalent to lst.append(x)).<span style="mso-spacerun: yes">  </span>An
index value less than 1 or greater than the number of elements in the list plus
1 is illegal and results in an “index out of range” exception.</p>

<pre><span style='font-family:"Times New Roman"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre><span
style='font-family:"Times New Roman"'>Because the new elements are inserted before any existing element at the insertion point, the index in the result list of the first element inserted always equals <i>index</i>.<span style="mso-spacerun: yes">  </span>For example, consider this statement:<o:p></o:p></span></pre><pre><span
style='font-family:"Times New Roman"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre><span style="mso-spacerun: yes">  </span>lst = lst.insertAt(5, 'a', 'b', 'c');</pre><pre><span
style='font-family:"Times New Roman"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre><span
style='font-family:"Times New Roman"'>After this statement is executed, lst[5] will be 'a'.<o:p></o:p></span></pre>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>Note that, if any of the values to be
inserted are themselves lists, each one is inserted as a single list-valued
element, in the same manner as append(<i>val</i>) and prepend(<i>val</i>).</p>

<p class=MsoNormal style='tab-stops:.5in'><b><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></b></p>

<p class=MsoNormal style='tab-stops:.5in'><b>intersect(<i>lst2</i>) – </b>returns
a new list consisting of the intersection of this list and <i>lst2</i>; that is,
a list consisting of the elements common to both this list and <i>lst2</i>.<span
style="mso-spacerun: yes">  </span><i>lst2 </i>must also be a list.<span
style="mso-spacerun: yes">  </span>If the two lists have no elements in common,
the result is an empty list.<span style="mso-spacerun: yes">  </span>If an
element of the <i>shorter</i> list (or, if the lists are of equal length, this
list) appears more than once in the shorter list, and that element value also
appears in the longer list, then the element will be in the result list the
same number of times that it is in the shorter list.<span style="mso-spacerun:
yes">  </span>An element repeated in the longer list will <i>not</i> be
repeated in the result list.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><b>lastIndexOf(<i>val</i>) – </b>returns
the index of the last element in the list whose value equals <i>val</i>.<span
style="mso-spacerun: yes">  </span>If no element in the list equals <i>val</i>,
this method returns nil.</p>

<p class=MsoNormal style='tab-stops:.5in'><b><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></b></p>

<p class=MsoNormal style='tab-stops:.5in'><b>lastIndexWhich(<i>cond</i>) – </b>returns
the index of the last element in the list for which the callback function <i>cond</i>
returns a non-false value (anything except nil or 0).<span style="mso-spacerun:
yes">  </span>This method is similar to indexWhich(<i>cond</i>), but scans the
list in reverse order, starting at the last element and working towards the
first.<span style="mso-spacerun: yes">  </span>Returns nil if the callback
returns nil or 0 for every element.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><b>lastValWhich(<i>cond</i>) – </b>returns
the value of the last element in the list for which the callback function <i>cond
</i>returns a non-false value.<span style="mso-spacerun: yes">  </span>This
method is similar to lastIndexWhich(<i>cond</i>), but returns the value of the
matching element rather than its index.<span style="mso-spacerun: yes"> 
</span>Returns nil if the callback returns nil or 0 for every element.</p>

<p class=MsoNormal style='tab-stops:.5in'><b><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></b></p>

<p class=MsoNormal style='tab-stops:.5in'><b>length() – </b>returns the number
of elements in the list.</p>

<p class=MsoNormal style='tab-stops:.5in'><b><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></b></p>

<p class=MsoNormal style='tab-stops:.5in'><b>mapAll(<i>func</i>) – </b>for each
element of the list, this method invokes the callback function <i>func</i>,
passing the current element as the single argument, then adds the return value
to a new list.<span style="mso-spacerun: yes">  </span>The method returns the
resulting new list, which has the same number of elements as the original list.<span
style="mso-spacerun: yes">  </span>Each element of the returned list contains
the result returned by <i>func</i> for the corresponding element of the
original list.<span style="mso-spacerun: yes">  </span>This method does not
modify the original list, but creates a new list.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>Here's an example that creates a new
list consisting of multiplying each element of an original list by 2 (naturally,
for this to work, the original list must consist entirely of integer values):</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style="mso-spacerun: yes">  </span>x = [1, 2, 3, 4];</pre><pre><span style="mso-spacerun: yes">  </span>y = x.applyAll({x: x*2});</pre>

<p class=MsoNormal style='tab-stops:.5in'><span style="mso-spacerun:
yes"> </span></p>

<p class=MsoNormal style='tab-stops:.5in'><a name=sort></a><b>prepend(<i>val</i>)
– </b>returns a new list which results from inserting the value <i>val </i>before
the first element of the existing list.<span style="mso-spacerun: yes"> 
</span>This method is similar to append(<i>val</i>), but this method inserts
the new element at the beginning of the list rather than at the end.<span
style="mso-spacerun: yes">  </span>Note that if <i>val </i>is a list, it is
prepended as a single list-valued element.<i><o:p></o:p></i></p>

<p class=MsoNormal style='tab-stops:.5in'><b><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></b></p>

<p class=MsoNormal style='tab-stops:.5in'><b>removeElementAt(<i>index</i>) – </b>returns
a new list which results from deleting the element at the given index.<span
style="mso-spacerun: yes">  </span>For example, [100, 200,
300].removeElementAt(2) yields [100, 300].<span style="mso-spacerun: yes"> 
</span>The index value must be at least 1 and at most the number of elements in
the list; if <i>index</i> is outside this range, the method throws an “index
out of range” exception.</p>

<p class=MsoNormal style='tab-stops:.5in'><b><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></b></p>

<p class=MsoNormal style='tab-stops:.5in'><b>removeRange(<i>startIndex,
endIndex</i>) – </b>returns a new list which results from deleting the elements
starting at <i>startIndex</i> and ending with (and including) <i>endIndex</i>.<span
style="mso-spacerun: yes">  </span>If <i>endIndex</i> equals <i>startIndex</i>,
only one value is deleted, so removeRange(x, x) is equivalent to
removeElementAt(x).</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>Both index values <i>startIndex</i>
and <i>endIndex</i> must be at least 1 and at most the number of elements in
the list, and <i>endIndex</i> must be greater than or equal to <i>startIndex</i>;
the method throws an “index out of range” exception if these conditions are not
met.</p>

<p class=MsoNormal style='tab-stops:.5in'><b><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></b></p>

<p class=MsoNormal style='tab-stops:.5in'><b>sort(<i>descending</i>?, <i>comparisonFunction</i>?)
– </b>returns a new list consisting of the elements of this list rearranged
into a sorted order.<span style="mso-spacerun: yes">  </span>By default, this
method sorts the elements of the list into ascending order, but you can reverse
this ordering by specifying true for the <i>descending </i>argument.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>The optional <i>comparisonFunction </i>can
be used to specify the ordering of the result.<span style="mso-spacerun: yes"> 
</span>If this argument is not specified (or is nil), the method will sort the
elements according to the standard system ordering of values; hence, the
elements must be of comparable types (such as all integers or all
strings).<span style="mso-spacerun: yes">  </span>By specifying a comparison
function, you can provide your own special ordering, and you can also sort
values that have no system-defined order, such as object values.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>If provided, the <i>comparisonFunction
</i>value is a pointer to a function taking two arguments, which are two values
from the list to be compared.<span style="mso-spacerun: yes">  </span>The
function returns an integer less than zero if the first value is less than the
first, zero if the two values are equal, or an integer greater than zero if the
first value is greater than the second.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>For example, if you wanted to sort a
list of objects so that the objects are placed into descending order of their
&quot;priority&quot; property values, where the &quot;priority&quot; property
has an integer value, you could do this:</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style="mso-spacerun: yes">  </span>lst = [obj1, obj2, obj3];</pre><pre><span style="mso-spacerun: yes">  </span>sortedLst = lst.sort(true, { a, b: a.priority – b.priority });</pre>

<p class=MsoNormal style='tab-stops:.5in'><b><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></b></p>

<p class=MsoNormal style='tab-stops:.5in'><b>sublist(<i>start, length</i>?) – </b>creates
and returns a new list consisting of a sublist of this list starting at the
element of this list at index <i>start</i>, and continuing for the number of
elements given by <i>length</i>, if present, or to the end of this list if
not.<span style="mso-spacerun: yes">  </span>Examples:</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style="mso-spacerun: yes">  </span>[1, 2, 3].sublist(2) yields [2, 3]</pre><pre><span style="mso-spacerun: yes">  </span>[1, 2, 3].sublist(2, 1) yields [2]</pre>

<p class=MsoNormal style='tab-stops:.5in'><b><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></b></p>

<p class=MsoNormal style='tab-stops:.5in'><b>subset(<i>func</i>) – </b>creates
and returns a new list containing the elements of this list for which the
callback function <i>func </i>returns true (i.e., any value other than nil or
the integer value 0).<span style="mso-spacerun: yes">  </span>For each element
of the source list, this method invokes the callback function, passing the
value of the current element as the callback function's single argument.<span
style="mso-spacerun: yes">  </span>If the callback returns nil or the integer
value 0, the method omits the element from the result; otherwise, the method
includes the element in the result list.<span style="mso-spacerun: yes"> 
</span>The new list's elements will be in the same order as the selected
elements from the source list.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>This method does not modify the
original list.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>This example uses a short-form
anonymous function to create a new list that contains only the elements from an
original list whose values are greater than 10.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style="mso-spacerun: yes">  </span>x = [5, 10, 15, 20];</pre><pre><span style="mso-spacerun: yes">  </span>y = x.subset({x: x &gt; 10});</pre>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><b>valWhich(<i>cond</i>) – </b>returns
the value of the first element for which the callback function <i>cond </i>returns
non-false (i.e., anything except nil or 0).<span style="mso-spacerun: yes"> 
</span>This method is similar to indexWhich(<i>cond</i>), but returns the value
of the first matching element rather than its index.<span style="mso-spacerun:
yes">  </span>If <i>cond</i> returns nil or 0 for every element of the list,
this method returns nil.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

</div>

</body>

</html>
