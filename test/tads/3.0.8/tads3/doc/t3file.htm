<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 9">
<meta name=Originator content="Microsoft Word 9">
<link rel=File-List href="./t3file_files/filelist.xml">
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Unknown User</o:Author>
  <o:LastAuthor>Dell User</o:LastAuthor>
  <o:Revision>44</o:Revision>
  <o:TotalTime>153</o:TotalTime>
  <o:Created>2001-07-15T05:32:00Z</o:Created>
  <o:LastSaved>2004-07-27T19:22:00Z</o:LastSaved>
  <o:Pages>4</o:Pages>
  <o:Words>2734</o:Words>
  <o:Characters>15586</o:Characters>
  <o:Company>DellComputerCorporation</o:Company>
  <o:Lines>129</o:Lines>
  <o:Paragraphs>31</o:Paragraphs>
  <o:CharactersWithSpaces>19140</o:CharactersWithSpaces>
  <o:Version>9.2720</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:Zoom>125</w:Zoom>
  <w:ActiveWritingStyle Lang="EN-US" VendorID="64" DLLVersion="131077"
   NLCheck="1">1</w:ActiveWritingStyle>
 </w:WordDocument>
</xml><![endif]-->
<style>
<!--
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-update:auto;
	mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	mso-bidi-font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
h3
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:3;
	font-size:13.0pt;
	font-family:Arial;
	font-weight:bold;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;
	text-underline:single;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;
	text-underline:single;}
p
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";}
tt
	{mso-ascii-font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Courier New";
	mso-bidi-font-family:"Times New Roman";}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
@list l0
	{mso-list-id:386078163;
	mso-list-type:hybrid;
	mso-list-template-ids:107630742 67698689 67698691 67698693 67698689 67698691 67698693 67698689 67698691 67698693;}
@list l0:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	font-family:Symbol;}
@list l1
	{mso-list-id:501088635;
	mso-list-type:hybrid;
	mso-list-template-ids:296748368 67698689 67698691 67698693 67698689 67698691 67698693 67698689 67698691 67698693;}
@list l1:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	font-family:Symbol;}
@list l2
	{mso-list-id:1194880261;
	mso-list-type:hybrid;
	mso-list-template-ids:1306822494 67698689 67698691 67698693 67698689 67698691 67698693 67698689 67698691 67698693;}
@list l2:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	font-family:Symbol;}
@list l3
	{mso-list-id:2090810849;
	mso-list-type:hybrid;
	mso-list-template-ids:514739120 67698689 67698691 67698693 67698689 67698691 67698693 67698689 67698691 67698693;}
@list l3:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	font-family:Symbol;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>
<!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="1027"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]-->
</head>

<body lang=EN-US link=blue vlink=purple style='tab-interval:.5in'>

<div class=Section1>

<h3>The File Intrinsic Class</h3>

<p class=MsoNormal>The File intrinsic class provides access to create, read,
and write files.<span style="mso-spacerun: yes">  </span>A &quot;file&quot; is
a collection of text or other data stored on a storage device such as a hard
disk, and typically given a name that programs and users can use to refer to
the data collection.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>In addition to reading and writing ordinary operating system
files, the File class can be used to read “resources.”<span
style="mso-spacerun: yes">  </span>A resource is essentially a file, but has
two important differences.<span style="mso-spacerun: yes">  </span>First, a resource
is referenced using a URL-style notation, which is a universal notation that is
identical on all operating systems; “URL” stands for “uniform resource
locator,” which is a Web standard.<span style="mso-spacerun: yes"> 
</span>Resources don’t use true URL’s, but rather borrow the standard URL
notation for representing relative (subdirectory) paths.<span
style="mso-spacerun: yes">  </span>Second, a resource can be embedded into the
program’s image file, or into an external resource bundle file, using a tool
that comes with the TADS 3 compiler.<span style="mso-spacerun: yes"> 
</span>The resource mechanism’s benefit is that it allows a developer to bundle
extra data embedded directly in the program’s image file, which simplifies
distributing and installing the program by reducing the number of files that
have to be shipped along with it.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>To use File objects, you must #include the system header
file &quot;file.h&quot;.</p>

<h3>File Formats</h3>

<p class=MsoNormal>TADS 3 provides access to files using three different
&quot;formats.&quot;<span style="mso-spacerun: yes">  </span>A file's format is
simply the way the file's data are arranged; each format is useful in different
situations.<span style="mso-spacerun: yes">  </span>The formats are:</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal style='mso-list:l0 level1 lfo3;tab-stops:list .5in'>Text.<span
     style="mso-spacerun: yes">  </span>A file in text format stores a sequence
     of ordinary characters (letters, numbers, punctuation), organized into
     &quot;lines.&quot;<span style="mso-spacerun: yes">  </span>A line of text
     is simply a sequence of characters ending with a special
     &quot;newline&quot; character or character sequence.<span
     style="mso-spacerun: yes">  </span>Text format files are useful when you
     want to read or write data intended for direct viewing or editing by a
     person, and because of their simple format can be interchanged among many
     different application programs.<span style="mso-spacerun: yes"> 
     </span>When you use a text format file, TADS automatically converts
     between the Unicode characters that TADS uses internally and the local character
     set used by the file, and TADS also automatically translates newline
     sequences in the file according to local conventions, which vary among
     platforms.</li>
 <li class=MsoNormal style='mso-list:l0 level1 lfo3;tab-stops:list .5in'>Data.<span
     style="mso-spacerun: yes">  </span>A file in &quot;data&quot; format can store
     integers, enums, strings, ByteArray values, BigNumber values, and
     &quot;true&quot; values.<span style="mso-spacerun: yes">  </span>Data
     format files use a private data format that only TADS can read and write,
     so this format is not useful for files that must be interchanged with
     other application programs.<span style="mso-spacerun: yes">  </span>When
     you wish to create a file for use only by your program or other TADS
     programs, though, this format is convenient because it allows you to read
     and write all of the datatypes listed above directly – TADS automatically
     converts the values to and from an appropriate representation in the
     file.<span style="mso-spacerun: yes">  </span>This format is also
     convenient because the format is portable to all TADS platforms – a
     &quot;data&quot; format file is binary-compatible across all platforms
     where TADS runs, with no conversions of any kind necessary when you copy a
     file from one type of system to another.</li>
 <li class=MsoNormal style='mso-list:l0 level1 lfo3;tab-stops:list .5in'>Raw.<span
     style="mso-spacerun: yes">  </span>A file in raw format simply stores
     bytes, and gives your program direct access to the bytes with no
     translation of any kind.<span style="mso-spacerun: yes">  </span>Raw
     format is a lot more work than text or data format, because your program
     must interpret all of the bytes in a file with no help from TADS, but this
     format gives you total flexibility to work with file formats defined by
     other applications.</li>
</ul>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>Resources can be read using the Text and Raw formats.</p>

<h3>Creating a File Object</h3>

<p class=MsoNormal>A File object gives you working access to a file on
disk.<span style="mso-spacerun: yes">  </span>The File keeps track of all of
the information involved with your access to the file: the format you're using
to read and write the file, the type of access you have to the file, and the
current position in the file where you're reading or writing.</p>

<p class=MsoNormal><br>
You do not use the <tt><span style='font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>new</span></tt> operator to create a File object; instead,
you use one of the &quot;open&quot; methods of the File class itself:</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style="mso-spacerun: yes">  </span>File.openTextFile(<i>filename</i>, <i>access</i>, <i>charset</i>?)</pre><pre><span style="mso-spacerun: yes">  </span>File.openDataFile(<i>filename</i>, <i>access</i>)</pre><pre><span style="mso-spacerun: yes">  </span>File.openRawFile(<i>filename</i>, <i>access</i>)</pre><pre><span
style='mso-bidi-font-size:12.0pt;font-family:"Times New Roman"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre>

<p class=MsoNormal style='tab-stops:.5in'>The <i>filename</i> argument is a
string giving the name of the file to be opened or created.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>The <i>access</i> argument gives the
type of access you want to the file, and determines whether an existing file is
to be used or a new file is to be created.<span style="mso-spacerun: yes"> 
</span>The <i>access</i> argument can be one of the following constants:</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal style='mso-list:l1 level1 lfo6;tab-stops:list .5in'>FileAccessRead
     – the file is to be opened for reading.<span style="mso-spacerun: yes"> 
     </span>The file must exist, or the method will throw a
     FileNotFoundException.</li>
 <li class=MsoNormal style='mso-list:l1 level1 lfo6;tab-stops:list .5in'>FileAccessWrite
     – the file is to be opened for writing.<span style="mso-spacerun: yes"> 
     </span>If no file of the given name exists, a new file is created.<span
     style="mso-spacerun: yes">  </span>If a file with the same name already
     exists, the existing file is replaced with the new file, and any contents
     of the existing file are discarded.<span style="mso-spacerun: yes"> 
     </span>If the file cannot be created, a FileCreationException is thrown.</li>
 <li class=MsoNormal style='mso-list:l1 level1 lfo6;tab-stops:list .5in'>FileAccessReadWriteKeep
     – the file is to be opened for both reading and writing.<span
     style="mso-spacerun: yes">  </span>If the file already exists, the
     existing file is opened, otherwise a new file is created.<span
     style="mso-spacerun: yes">  </span>If the file cannot be opened, a FileOpenException
     is thrown.</li>
 <li class=MsoNormal style='mso-list:l1 level1 lfo6;tab-stops:list .5in'>FileAccessReadWriteTrunc
     – the file is to be opened for both reading and writing.<span
     style="mso-spacerun: yes">  </span>If the file already exists, its
     existing contents are discarded (the file is truncated to zero length); if
     the file doesn't exist, a new file is created.<span style="mso-spacerun:
     yes">  </span>If the file cannot be opened, a FileOpenException is thrown.</li>
</ul>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>File.openTextFile(<i>filename,
access, charset</i>?) opens a file in text format.<span style="mso-spacerun:
yes">  </span>Any access mode may be used with this method.<span
style="mso-spacerun: yes">  </span>If the <i>charset</i> argument is given, it
must be an object of the <a href="t3cset.htm">CharacterSet intrinsic class</a>
giving the character set to be used to translate between the file's character
set and the internal TADS Unicode character set.<span style="mso-spacerun:
yes">  </span>If this argument is missing, the File object will use the plain
ASCII character set by default.</p>

<p class=MsoNormal style='margin-top:12.0pt;tab-stops:.5in'>File.openDataFile(<i>filename,
access</i>) opens a file in &quot;data&quot; format.<span style="mso-spacerun:
yes">  </span>Any access mode may be used with this method.</p>

<p class=MsoNormal style='margin-top:12.0pt;tab-stops:.5in'>File.openRawFile(<i>filename,
access</i>) opens a file in &quot;raw&quot; format.<span style="mso-spacerun:
yes">  </span>Any access mode may be used with this method.</p>

<p class=MsoNormal style='margin-top:12.0pt;tab-stops:.5in'>All of the
&quot;open&quot; methods check the file safety level settings to ensure that
the file access is allowed.<span style="mso-spacerun: yes">  </span>If the file
safety level is too restrictive for a requested operation, the method throws a
FileSafetyException.<span style="mso-spacerun: yes">  </span>The file safety
level is a setting that the user specifies in a manner that varies by
interpreter; it allows the user to restrict the operations that a program
running under the interpreter can perform, to protect the user's computer
against malicious programs.</p>

<h3 style='tab-stops:.5in'>Opening a Resource</h3>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'>In
addition to the methods that open ordinary operating system files, the File
object has two methods that can be used to open resources:</p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style="mso-spacerun: yes">  </span>openTextResource(<i>resName, charset</i>?)</pre><pre><span style="mso-spacerun: yes">  </span>openRawResource(<i>resName</i>)</pre>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'>The
<i>resName</i> argument gives the name of the resource to be opened.<span
style="mso-spacerun: yes">  </span>This is given as a URL-style relative path
name: the “/” character is used as the path separator, but the path cannot
start with a “/”, as it must be relative to the working directory (which is
generally the directory containing the image file).<span style="mso-spacerun:
yes">  </span>Note that the URL notation is universal: you must <i>always</i>
use the same “/” path separator notation, regardless of the operating
system.<span style="mso-spacerun: yes">  </span>The File object automatically
converts the URL-style path to the correct local conventions.<span
style="mso-spacerun: yes">  </span>This means that when you’re opening a
resource file, you don’t have to be concerned with the local file system naming
rules; simply use the standard URL format, and the File object will
automatically adapt to the platform at run-time.</p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'>The
<i>charset</i> argument has the same meaning as it does for openTextFile().</p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'>Note
that the open-resource methods don’t take an access-mode argument, as the
open-file methods do, because resource files can only be opened for
reading.<span style="mso-spacerun: yes">  </span>FileAccessRead is the only
possible access mode for a resource, so the methods don’t need a separate
argument for the mode.</p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'>The
open-resource methods are <i>not</i> sensitive to the file safety level.<span
style="mso-spacerun: yes">  </span>Since resources can only be read, never
written, and are constrained to the image file’s directory and its
subdirectories (since their paths are always relative to the image file’s home
directory), it's not possible for a T3 program to do any damage to the system
using resources, and highly unlikely that a program could use them to gain
access to any sensitive system information.<span style="mso-spacerun: yes"> 
</span>Resources are thus inherently “sandboxed” to a degree that no extra file
safety protection is required.</p>

<h3 style='tab-stops:.5in'>File Methods</h3>

<p class=MsoNormal style='tab-stops:.5in'><b>closeFile() – </b>close the
file.<span style="mso-spacerun: yes">  </span>This flushes internal buffers to
the external storage device and releases all operating system resources associated
with the open file.<span style="mso-spacerun: yes">  </span>On many operating
systems, when a program is working with a file, other programs are not allowed
to access the same file, to prevent any data corruption that would occur if
multiple programs were accessing the same data simultaneously without
coordinating their activities; closing a file tells the operating system that
your program is finished with the file, and that it is therefore safe to allow
other programs to access the file.<span style="mso-spacerun: yes">  </span>You
are not strictly required to call this method when finished with a file,
because TADS will automatically close the file when the garbage collector
determines that the File object is no longer usable; however, this could result
in consuming system resources for much longer than necessary, so it is always
good programming practice to close files explicitly as soon as you know you're
done with them.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>After closing a file, no further
operations can be performed on the file.<span style="mso-spacerun: yes"> 
</span>Any attempts to perform operations on the file will result in a
FileClosedException being thrown.</p>

<p class=MsoNormal style='tab-stops:.5in'><b><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></b></p>

<p class=MsoNormal style='tab-stops:.5in'><b>getCharacterSet() – </b>returns
the CharacterSet object that the file is using for its character
translations.<span style="mso-spacerun: yes">  </span>This is useful only with
files in text format.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><b>getFileSize() – </b>returns the
size in bytes of the file.<span style="mso-spacerun: yes">  </span>This is the
size of the file as it appears on disk, so this might not be the same as the
apparent size of the file's data stream as the program sees it; for example, if
the file is being read as a text file, character set translations and newline
format conversions will usually make the in-memory representation differ
somewhat from the binary representation on disk.</p>

<p class=MsoNormal style='tab-stops:.5in'><b><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></b></p>

<p class=MsoNormal style='tab-stops:.5in'><b>getPos()</b> – returns an integer
giving the current read/write position in the file; this is simply the byte
offset in the file of the next read or write operation.<span
style="mso-spacerun: yes">  </span>When a file is first opened, this will
return zero, because the first read or write operation will occur at the first
byte of the file, which is at offset zero.</p>

<p class=MsoNormal style='tab-stops:.5in'><b><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></b></p>

<p class=MsoNormal style='tab-stops:.5in'><b>readBytes(<i>byteArr, start</i>?<i>,
cnt</i>?) – </b>this function, which is used only for raw files, reads bytes from
the file into <i>byteArr</i>, which must be an object of <a href="t3bytarr.htm">intrinsic
class ByteArray</a>.<span style="mso-spacerun: yes">  </span>If <i>start</i>
and <i>cnt</i> are given, they give the starting index in the byte array at
which the bytes are to be stored and the number of bytes to be read; if these
are omitted, the function reads as many bytes from the file as there are bytes
in the byte array, and stores them in the byte array starting at its first
element (index 1).</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>This function returns the number of
bytes actually read from the file. <span style="mso-spacerun: yes"> </span>If
the end of the file is encountered before the request is fulfilled, the return
value will be smaller than the number of bytes requested.<span
style="mso-spacerun: yes">  </span>If the function returns zero, it simply
means that there are no more bytes available in the file.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>Note that if the file is open for
write-only access, a FileModeException will be thrown.</p>

<p class=MsoNormal style='tab-stops:.5in'><b><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></b></p>

<p class=MsoNormal style='tab-stops:.5in'><b>readFile()</b> – reads data from
the file and returns the value.<span style="mso-spacerun: yes">  </span>This
function reads data according to the file's format:</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal style='mso-list:l2 level1 lfo9;tab-stops:list .5in'>Text
     format: the next line of text is read from the file and returned as a
     string.<span style="mso-spacerun: yes">  </span>The line ends at the next
     &quot;newline&quot; character or character sequence; TADS recognizes
     newlines according to local platform conventions.<span
     style="mso-spacerun: yes">  </span>Regardless of the local newline
     conventions, the string returned always ends in a single '\n' character, <i>unless</i>
     the line is the last line in the file, and the file ends without a final
     newline sequence.<span style="mso-spacerun: yes">  </span>The characters
     read from the file are translated through the currently active character
     set, so a valid string in the internal Unicode character set is always
     returned, regardless of the character set of the external file.</li>
 <li class=MsoNormal style='mso-list:l2 level1 lfo9;tab-stops:list .5in'>Data
     format: the next data item is read from the file and returned.<span
     style="mso-spacerun: yes">  </span>The return value will be of the same
     type as the value that was originally written to the file.</li>
 <li class=MsoNormal style='mso-list:l2 level1 lfo9;tab-stops:list .5in'>Raw
     format: this function is not allowed for raw files (a FileModeException is
     thrown if this is attempted on a raw file).</li>
</ul>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style='mso-bidi-font-size:12.0pt;font-family:"Times New Roman"'>In any case, when the end of the file is reached, the function returns nil.<span style="mso-spacerun: yes">  </span>If any error occurs reading the file, the method throws a FileIOException.<o:p></o:p></span></pre><pre><span
style='mso-bidi-font-size:12.0pt;font-family:"Times New Roman"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre>

<p class=MsoNormal style='tab-stops:.5in'>Note that if the file is open for
write-only access, a FileModeException will be thrown.</p>

<p class=MsoNormal style='tab-stops:.5in'><b><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></b></p>

<p class=MsoNormal style='tab-stops:.5in'><b>setPos(<i>pos</i>) – </b>set the
read/write position in the file to <i>pos</i>, which is an integer giving a
byte offset in the file.<span style="mso-spacerun: yes">  </span>The first byte
in the file is at offset zero.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>For text and data format files, this
function should be used with caution.<span style="mso-spacerun: yes"> 
</span>In particular, you should only use this function to set a file position
that was previously returned from a call to getPos().<span style="mso-spacerun:
yes">  </span>Text and data format files have data structures that span
multiple bytes in the file, so setting the file to an arbitrary byte position
could cause the next read or write to occur in the middle of one of these
multi-byte structures, which could corrupt the file or cause data read to be
misinterpreted.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>For raw files, since your program is
responsible for the exact byte layout of the file, you can set the read/write
position wherever you want without any danger of confusing the File
object.<span style="mso-spacerun: yes">  </span>However, if you are defining
your own multi-byte structures, you must naturally take care to move the file
position only to the proper boundaries within your own structures.</p>

<p class=MsoNormal style='tab-stops:.5in'><b><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></b></p>

<p class=MsoNormal style='tab-stops:.5in'><b>setPosEnd() – </b>sets the
read/write position in the file to the end of the file.<span
style="mso-spacerun: yes">  </span>Any subsequent writing to the file will
place new bytes after the last existing byte in the file.<span
style="mso-spacerun: yes">  </span>This function is useful if you want to add
new data after all of the existing data in a file, and is also useful to
determine the size of a file (which you can do by seeking to the end of the
file and then using getPos() to determine the new position in the file). </p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>Note that the warnings mentioned in
setPos() regarding valid positions generally don't apply to setPosEnd().<span
style="mso-spacerun: yes">  </span>It is usually safe to go to the end of a
file, because whatever multi-byte data structures occur in the file should be
complete units, hence moving to the end of the file should set the position to
the end of the last structure.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><b>writeBytes(<i>byteArr</i>, <i>start</i>?,
<i>cnt</i>?) – </b>this function, which is used only for raw files, writes
bytes from <i>byteArr</i>, which must be an object of <a href="t3bytarr.htm">intrinsic
class ByteArray</a>, to the file.<span style="mso-spacerun: yes">  </span>If <i>start</i>
and <i>cnt</i> are given, they give the starting index in the byte array and
the number of bytes to be written; if these are omitted, all of the bytes in
the byte array are written.<span style="mso-spacerun: yes">  </span>The bytes
are written to the file without translation.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>This function has no return value; if
any error occurs writing the bytes, a FileIOException is thrown.</p>

<p class=MsoNormal style='tab-stops:.5in'><b><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></b></p>

<p class=MsoNormal style='tab-stops:.5in'>Note that if the file is open for
read-only access, a FileModeException will be thrown.</p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><b>writeFile(<i>val</i>)</b>
– writes the value <i>val</i> to the file.<span style="mso-spacerun: yes"> 
</span>The value is written according to the file's format:</p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal style='mso-list:l3 level1 lfo12;tab-stops:list .5in'>Text
     format: <i>val</i> is converted into a string using the default conversion
     for its type if it's not already a string; if the value is not convertible
     to a string, the function throws a runtime exception.<span
     style="mso-spacerun: yes">  </span>The string is written to the file by
     translating its characters to the local character set through the
     currently active character set object for the file.</li>
 <li class=MsoNormal style='mso-list:l3 level1 lfo12;tab-stops:list .5in'>Data
     format: the value can be an integer, string, enum, BigNumber, ByteArray,
     or &quot;true&quot; value.<span style="mso-spacerun: yes">  </span>The
     value is written in the private TADS data-file format so that it can be
     read back later with the readFile() method.</li>
 <li class=MsoNormal style='mso-list:l3 level1 lfo12;tab-stops:list .5in'>Raw
     format: this function is not allowed for raw files (a FileModeException is
     thrown if this is attempted on a raw file).</li>
</ul>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in;mso-layout-grid-align:none;punctuation-wrap:
simple;text-autospace:none'>Writing an enumerator value to a data format file
ties the file to the particular version of your program that wrote the
file.<span style="mso-spacerun: yes">  </span>When you compile your program,
the compiler assigns an arbitrary internal identifier value to each enumerator,
and it is this arbitrary internal value that the writeFile()<tt><span
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'> </span></tt>function
stores in the file.<span style="mso-spacerun: yes">  </span>When you use
readFile() to read an enumerator value, the system uses the current internal
enumerator value assignments made by the compiler.<span style="mso-spacerun:
yes">  </span>Because these values are arbitrary, they can vary from one
compilation to the next, so it is not guaranteed that a file containing
enumerators can be correctly read after you have recompiled your program.<span
style="mso-spacerun: yes">  </span>For this reason, you should never write
enumerators to a file unless you are certain that the file will only be used by
the identical version of your program (so it's safe, for example, to use
enumerators in a temporary file that will be read back in during the same run
of the program).<span style="mso-spacerun: yes">  </span>If you must store enumerators
in a file that might be read by a future version of your program, you should
use some mechanism (such as <a href="t3refl.htm">reflection</a>) to translate
enumerator values into integers, strings, or other values that <i>you </i>define
and can therefore keep stable as you modify your program.<span
style='mso-bidi-font-size:10.0pt'><o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'>If
any error occurs writing the data, such as running out of disk space, the
method throws a FileIOException.<span style="mso-spacerun: yes">  </span>If the
file is open for read-only access, a FileModeException is thrown.</p>

<pre><span style='mso-bidi-font-size:12.0pt;font-family:"Times New Roman"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre>

<p class=MsoNormal style='tab-stops:.5in'><b>setCharacterSet(<i>charset</i>) – </b>sets
the CharacterSet object that the file uses for its character translations.<span
style="mso-spacerun: yes">  </span>The <i>charset</i> value must be an object
of intrinsic class CharacterSet.<span style="mso-spacerun: yes"> 
</span>Subsequent read or write operations will use the given character set for
character translations.</p>

<h3 style='tab-stops:.5in'>Interaction with Save/Restore, Undo, and Restart</h3>

<p class=MsoNormal style='tab-stops:.5in'>File objects are inherently <a
href="t3obj.htm#transient">transient</a>; all instances returned from the
creation methods (openTextFile, etc.) are transient and thus not affected by
save, restore, restart, or undo.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>If a File instance is part of the
program when pre-initialization completes, and is thus saved to the final image
file, the instance will be “unsynchronized” when the program is loaded.<span
style="mso-spacerun: yes">  </span>This means that the File object no longer
refers to an open operating system file – once the object has been saved with
the image file and then reloaded, there is obviously no longer an active
association with the system file.<span style="mso-spacerun: yes">  </span>When
a File object becomes unsynchronized, it will no longer allow any operation
that could be affected by the inconsistency.<span style="mso-spacerun: yes"> 
</span>In particular, the file cannot be read or written once it is
unsynchronized.<span style="mso-spacerun: yes">  </span>To enforce this, the
File object throw a FileSyncException if any of these operations are attempted
on an unsynchronized file.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

</div>

</body>

</html>
