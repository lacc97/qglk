<html xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 9">
<meta name=Originator content="Microsoft Word 9">
<link rel=File-List href="./t3bignum_files/filelist.xml">
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Merkin Muffley</o:Author>
  <o:LastAuthor>Dell User</o:LastAuthor>
  <o:Revision>78</o:Revision>
  <o:TotalTime>625</o:TotalTime>
  <o:Created>2000-02-22T05:07:00Z</o:Created>
  <o:LastSaved>2004-06-25T02:42:00Z</o:LastSaved>
  <o:Pages>9</o:Pages>
  <o:Words>4308</o:Words>
  <o:Characters>24558</o:Characters>
  <o:Lines>204</o:Lines>
  <o:Paragraphs>49</o:Paragraphs>
  <o:CharactersWithSpaces>30158</o:CharactersWithSpaces>
  <o:Version>9.2720</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:View>Normal</w:View>
  <w:Zoom>125</w:Zoom>
  <w:DrawingGridHorizontalSpacing>6 pt</w:DrawingGridHorizontalSpacing>
  <w:DrawingGridVerticalSpacing>6 pt</w:DrawingGridVerticalSpacing>
  <w:DisplayVerticalDrawingGridEvery>0</w:DisplayVerticalDrawingGridEvery>
  <w:UseMarginsForDrawingGridOrigin/>
  <w:Compatibility>
   <w:SpaceForUL/>
   <w:BalanceSingleByteDoubleByteWidth/>
   <w:DoNotLeaveBackslashAlone/>
   <w:ULTrailSpace/>
   <w:DoNotExpandShiftReturn/>
   <w:WW6BorderRules/>
   <w:FootnoteLayoutLikeWW8/>
   <w:ShapeLayoutLikeWW8/>
   <w:AlignTablesRowByRow/>
   <w:ForgetLastTabAlignment/>
   <w:AutoSpaceLikeWord95/>
   <w:LayoutRawTableWidth/>
   <w:LayoutTableRowsApart/>
  </w:Compatibility>
 </w:WordDocument>
</xml><![endif]-->
<style>
<!--
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-layout-grid-align:none;
	punctuation-wrap:simple;
	text-autospace:none;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
h3
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:3;
	mso-layout-grid-align:none;
	punctuation-wrap:simple;
	text-autospace:none;
	font-size:13.0pt;
	font-family:Arial;}
p.MsoBodyTextIndent, li.MsoBodyTextIndent, div.MsoBodyTextIndent
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:2.4pt;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-layout-grid-align:none;
	punctuation-wrap:simple;
	text-autospace:none;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;
	text-underline:single;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;
	text-underline:single;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-layout-grid-align:none;
	punctuation-wrap:simple;
	text-autospace:none;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";}
tt
	{mso-ascii-font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Courier New";
	mso-bidi-font-family:"Times New Roman";}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
@list l0
	{mso-list-id:353269650;
	mso-list-type:hybrid;
	mso-list-template-ids:-413761502 67698689 67698691 67698693 67698689 67698691 67698693 67698689 67698691 67698693;}
@list l0:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:38.4pt;
	mso-level-number-position:left;
	margin-left:38.4pt;
	text-indent:-.25in;
	font-family:Symbol;}
@list l1
	{mso-list-id:1144473327;
	mso-list-type:hybrid;
	mso-list-template-ids:241998234 67698689 67698691 67698693 67698689 67698691 67698693 67698689 67698691 67698693;}
@list l1:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	font-family:Symbol;}
@list l2
	{mso-list-id:1833132545;
	mso-list-type:hybrid;
	mso-list-template-ids:72644578 67698689 67698691 67698693 67698689 67698691 67698693 67698689 67698691 67698693;}
@list l2:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	font-family:Symbol;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>
</head>

<body lang=EN-US link=blue vlink=purple style='tab-interval:.5in'>

<div class=Section1>

<h3>The BigNumber Intrinsic Class</h3>

<p class=MsoNormal>TADS 2 provided only integer arithmetic.<span
style="mso-spacerun: yes">  </span>While this was largely adequate for writing
interactive fiction, the need nonetheless arises on occasion for more powerful
arithmetic features than integer math provides, particularly floating point
values (numbers involving a fractional part), greater numeric range (the
ability to represent very large or very small numbers), and greater precision
(the ability to represent fine differences between values).<span
style="mso-spacerun: yes">  </span>In adventure game programming, it is usually
possible to simulate these effects using integer arithmetic only, but this is
considerably more work than it would be with a more powerful math package.</p>

<p class=MsoNormal><br>
TADS 3 addresses this occasional need with a new intrinsic class called
BigNumber, which provides high- precision floating-point arithmetic.<span
style="mso-spacerun: yes">  </span>BigNumber can represent values with enormous
precision, storing up to 65,000 decimal digits in a value; and can represent a
huge range of values, with absolute values up to 10<sup>32,767</sup> and down
to 10<sup>-32,767</sup>.<span style="mso-spacerun: yes">   </span>These limits
are so high that, for all practical purposes, calculations will never encounter
them.<span style="mso-spacerun: yes">  </span>Furthermore, the BigNumber type
can store values with whatever precision is actually required for each
particular value, up to the limits; a program can use this flexibility to
strike the balance it requires between numerical precision and
performance.<span style="mso-spacerun: yes">  </span>(For reasons that are
probably obvious, the more precision a BigNumber value stores, the more memory
it uses and the more time it takes to perform calculations with the
number.<span style="mso-spacerun: yes">  </span>BigNumber lets the programmer
determine how much precision to use, so that the programmer can balance the
degree of numerical precision against the cost in performance.)</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>Note that the BigNumber type is <i>not </i>the
&quot;double-precision&quot; or IEEE floating point type with which readers
with a programming background will be familiar.<span style="mso-spacerun:
yes">  </span>The BigNumber type is superior in many ways to double-precision
values:</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='margin-left:38.4pt;text-indent:-.25in;mso-list:l0 level1 lfo2;
tab-stops:list 38.4pt'><![if !supportLists]><span style='font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>BigNumber is portable to any computer, and behaves
exactly the same way on every computer.<span style="mso-spacerun: yes"> 
</span>Doubles tend to have subtle but sometimes vexing variations from one
computer to another.</p>

<p class=MsoNormal style='margin-left:38.4pt;text-indent:-.25in;mso-list:l0 level1 lfo2;
tab-stops:list 38.4pt'><![if !supportLists]><span style='font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>BigNumber uses a decimal rather than binary encoding,
which means that any value that one can write in a decimal format can be
represented exactly without rounding error.<span style="mso-spacerun: yes"> 
</span>Many common decimal values turn into repeating sequences when expressed
in binary (much as 1/3 cannot be exactly represented in decimal: the 3's repeat
forever in 0.33333…).<span style="mso-spacerun: yes">  </span>This can lead to
surprising results when rounding errors accumulate in calculations that, to all
appearances, should be exact.</p>

<p class=MsoNormal style='margin-left:38.4pt;text-indent:-.25in;mso-list:l0 level1 lfo2;
tab-stops:list 38.4pt'><![if !supportLists]><span style='font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>BigNumber allows for effectively unlimited precision
and much greater range than doubles, which have a fixed precision that cannot
be changed by the programmer.<span style="mso-spacerun: yes">  </span>This
allows, for example, calculations involving very large integers, or precise
calculations where very large and very small values are combined.</p>

<p class=MsoNormal style='margin-left:2.4pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoBodyTextIndent>An advantage of double-precision values over the
BigNumber representation is better performance, partly because arithmetic is
simpler with a fixed-precision type, but mostly because doubles are implemented
in hardware on many platforms.<span style="mso-spacerun: yes">  </span>This
seems a reasonable sacrifice, though; the kinds of applications that require
high-speed numerics probably wouldn't find TADS to be an ideal choice of language
anyway.</p>

<h3>Working with BigNumber Values</h3>

<p class=MsoNormal>You must include the system header file &lt;bignum.h&gt; in
your source files to use the BigNumber class.<span style="mso-spacerun: yes"> 
</span>This file defines the BigNumber class interface.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>To create a BigNumber value, use the <tt><span
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>new</span></tt>
operator, passing the value for the number either as an integer or as a
character string.<span style="mso-spacerun: yes">  </span>You can optionally
specify the <a href="#_Precision_and_Scale_1">precision</a> to use for the
value; if you don't specify a precision, the system infers a precision from the
value.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style="mso-spacerun: yes">  </span>x = new BigNumber(100);</pre><pre><span style="mso-spacerun: yes">  </span>x = new BigNumber(100, 10); // set precision to 10 digits</pre><pre><span style="mso-spacerun: yes">  </span>y = new BigNumber('3.14159265');</pre><pre><span style="mso-spacerun: yes">  </span>z = new BigNumber('1.06e-30');</pre><pre><span style="mso-spacerun: yes">  </span>z = new BigNumber('1.06e-30', 8); // precision is 8 digits</pre>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>If you specify a string value, you can
use a decimal point, and you can also use an 'E' to specify a base-ten
exponent.<span style="mso-spacerun: yes">  </span>So, the fourth value above
should be read as 1.06 x 10<sup>-30</sup>.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>You can also create a BigNumber
object simply by using a numeric constant that contains a decimal point or an exponent
(or both):</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style="mso-spacerun: yes">  </span>x = 1.075;</pre>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>You can perform addition,
subtraction, multiplication, division, and negation on BigNumber values using
the standard operators.<span style="mso-spacerun: yes">  </span>You can also
use integer values with BigNumber values in calculations, although the BigNumber
value must <i>always </i>be the first operand in an expression involving both a
BigNumber and an integer.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style="mso-spacerun: yes">  </span>x = y + z;</pre><pre><span style="mso-spacerun: yes">  </span>x = (y + z) * (y – z) / 2;</pre>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>Similarly, you can compare BigNumber
values using the normal comparison operators:</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style="mso-spacerun: yes">  </span>if (x &gt; y) ...</pre>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>You can convert a BigNumber to a
string using the <tt><span style='font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>toString()</span></tt> function in the &quot;tads-gen&quot;
intrinsic function set.<span style="mso-spacerun: yes">  </span>You can
exercise more control over formatting using the <tt><span style='font-family:
"Courier New";mso-bidi-font-family:"Times New Roman"'>formatString()</span></tt>
method of the BigNumber class itself.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>You can convert a BigNumber to a regular
integer value using the toInteger() function from the &quot;tads-gen&quot;
function set.<span style="mso-spacerun: yes">  </span>Note that toInteger()
throws an error if passed a BigNumber value that is too large to represent as a
32-bit integer, which can store values from 2,147,483,647 to –2,147,483,647.<span
style="mso-spacerun: yes">  </span>toInteger() rounds numbers with fractional
parts to the nearest integer.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>You cannot use operators other than
those listed above with BigNumber values.<span style="mso-spacerun: yes"> 
</span>You cannot use a BigNumber as an operand for any of the bitwise
operators (&amp;, |, ~).<span style="mso-spacerun: yes">  </span>You also
cannot use a BigNumber with the integer modulo operator (&quot;%&quot;), but
you can obtain similar functionality from the <a href="#divideBy">divideBy()</a>
method.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>You cannot use BigNumber values in
function and method calls that require integer arguments.<span
style="mso-spacerun: yes">  </span>You must explicitly convert a BigNumber
value to an integer with the toInteger() function if you want to pass it to a
method or function that takes an integer value; the compiler does <i>not </i>perform
these conversions for you automatically.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>Because BigNumber values are, for
most purposes, simply object references, you can use them where you can use
other objects; you can, for example, store a BigNumber in a list, or assign it
to an object property.</p>

<h3 style='tab-stops:.5in'><a name="_Precision_and_Scale"></a><a
name="_Intrinsic_Class_Methods"></a>Compiler Support</h3>

<p class=MsoNormal>Although BigNumber is not a native type in the T3 VM (it is
simply an intrinsic class, which plugs into the VM using the VM's type
extension mechanism), the TADS 3 compiler has some minimal support for the
type.<span style="mso-spacerun: yes">  </span>In particular, the compiler
recognizes BigNumber constant values in this format:</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style="mso-spacerun: yes">   </span>[ <i>digits</i> ] . [<i> digits </i>] [ E|e [+|-] <i>digits </i>]</pre>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>In other words, the compiler
recognizes any numeric constant that includes a decimal point (a period) <i>or </i>an
exponent (specified with an 'e' or 'E') as a BigNumber constant.<span
style="mso-spacerun: yes">  </span>When you include a number in this format in
your source code, the compiler will automatically create and initialize a
BigNumber object for you with the given value.<span style="mso-spacerun: yes"> 
</span>So, the following two statements are equivalent: </p>

<pre><span style='font-family:"Times New Roman"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre><span style="mso-spacerun: yes">   </span>x = new BigNumber('3.14159265');</pre><pre><span style="mso-spacerun: yes">   </span>y = 3.14159265;</pre>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>The compiler uses the same rules as
the <tt><span style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>new</span></tt>
operator for parsing the number's value and precision.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>Note that the compiler does not
currently perform constant folding on BigNumber values.<span
style="mso-spacerun: yes">  </span>This means that expressions like the following
will result in a run-time calculation being performed:</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style="mso-spacerun: yes">   </span>#define PI 3.14159265</pre><pre><span style="mso-spacerun: yes">   </span>x = PI/4;</pre>

<h3 style='tab-stops:.5in'>Intrinsic Class Methods</h3>

<p class=MsoNormal style='tab-stops:.5in'>The BigNumber class provides a number
of methods for manipulating values.<span style="mso-spacerun: yes"> 
</span>Note that all of the methods that perform calculations return <i>new </i>BigNumber
values.<span style="mso-spacerun: yes">  </span>A BigNumber object's value is
immutable once the object is created, so all calculations performed on these
objects return new objects representing the result values.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>Note that these functions are all
methods called on a BigNumber object, so to calculate the absolute value of a
BigNumber value x, we would code this:</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style="mso-spacerun: yes">  </span>y = x.getAbs();</pre><pre><span
style='font-family:"Times New Roman"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre>

<p class=MsoNormal style='tab-stops:.5in'>Some of the methods take an argument
giving a value to be combined with the target number.<span style="mso-spacerun:
yes">  </span>For example, to get the remainder of dividing 10 by 3, we'd write
this:</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style="mso-spacerun: yes">  </span>x = new BigNumber('10.0000');</pre><pre><span style="mso-spacerun: yes">  </span>y = new BigNumber('3.00000');</pre><pre><span style="mso-spacerun: yes">  </span>rem = x.divideBy(y)[2];<span style="mso-spacerun: yes">  </span>// second list item is remainder</pre>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><b>arccosine() – </b>returns the
arccosine (the number whose cosine is this value), as a value in radians, of
the number. <span style="mso-spacerun: yes"> </span>This function is
mathematically meaningful only for input values from –1 to +1; this function
throws a run-time exception if the input value is outside of this range.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><b>arcsine() – </b>returns the
arcsine (the number whose sine is this value), as a value in radians, of the
number.<span style="mso-spacerun: yes">  </span>This function is mathematically
meaningful only for input values from –1 to +1; this function throws a run-time
exception if the input value is outside of this range.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><b>arctangent() – </b>returns the
arctangent (the number whose tangent is this value), as a value in radians, of
the number.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><b>copySignFrom(<i>x</i>) – </b>returns
a number containing the same absolute value as this number, but with the sign
of <i>x</i> replacing the original value's sign.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><b>cosh()</b> – computes the
hyperbolic cosine of the number and returns the result.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><b>cosine() – </b>computes the
trigonometric cosine of the number (interpreted as a radian value) and returns
the result.<span style="mso-spacerun: yes">  </span>Refer to the description of
sine() for notes on how the input precision affects the calculation.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><b>degreesToRadians() – </b>converts
the value from radians to degrees and returns the number of degrees.<span
style="mso-spacerun: yes">  </span>This simply multiplies the value by
(pi/180).</p>

<p class=MsoNormal style='tab-stops:.5in'><span style="mso-spacerun:
yes"> </span></p>

<p class=MsoNormal style='tab-stops:.5in'><b>divideBy(<i>x</i>) – </b>computes
the integer quotient of dividing this number by <i>x</i>, and returns a list
with two elements.<span style="mso-spacerun: yes">  </span>The first element is
a BigNumber value giving the integer quotient, and the second element is a
BigNumber value giving the remainder of the division, which is a number <i>rem </i>satisfying
the relationship <i>dividend = quotient*divisor + remainder</i>.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>Note that the quotient returned from
divideBy() is not necessarily equal to the whole part of the result of the
division (&quot;/&quot;) operator applied to the same values.<span
style="mso-spacerun: yes">  </span>If the precision of the result (which is, as
with all calculations, equal to the larger of the precisions of the operands)
is insufficient to represent exactly the integer quotient result, the quotient
returned from this function will be rounded differently from the quotient
returned by the division operator.<span style="mso-spacerun: yes">  </span>The
division operator always rounds its result to the nearest </p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><b>equalRound(<i>num</i>) – </b>determine
if this value is equal to <i>num </i>after rounding.<span style="mso-spacerun:
yes">  </span>This is equivalent to the &quot;==&quot; operator if the numbers
have the same precision, but if one number is more precise than the other, this
rounds the more precise of the two values to the precision of the less precise
value, then compares the values.<span style="mso-spacerun: yes">  </span>The
&quot;==&quot; operator makes an exact comparison, effectively extending the
precision of the less precise value by adding imaginary zeroes to the end of
the number.</p>

<p class=MsoNormal style='tab-stops:.5in'><b><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></b></p>

<p class=MsoNormal style='tab-stops:.5in'><b>expE() – </b>returns the result of
raising e, the base of the natural logarithm, to the power of this number.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><b>formatString(<i>maxDigits, flags?,
wholePlaces?, fracDigits?, expDigits?, leadFiller?</i>)</b> – Formats the
number, returning a string with the result.<span style="mso-spacerun: yes"> 
</span>All of the arguments after <i>maxDigits </i>are optional.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><i>maxDigits </i>specifies the
maximum number of digits to display in the formatted number; this is an upper
bound only, and doesn't force a minimum number of digits.<span
style="mso-spacerun: yes">  </span>If necessary, the function uses scientific
notation to make the number fit in the requested number of digits.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><i>wholePlaces </i>specifies the
minimum number of places to show before the decimal point; if the number
doesn't fill all of the requested places, the function inserts leading spaces
(before the sign character, if any).<span style="mso-spacerun: yes">  </span></p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><i>fracDigits </i>specifies the
number of digits to display after the decimal point.<span style="mso-spacerun:
yes">  </span>This specifies the maximum to display, and also the minimum; if
the number doesn't have enough digits to display, the method adds trailing
zeroes, and if there are more digits than <i>fracDigits </i>allows, the method
rounds the value for display.<span style="mso-spacerun: yes">  </span></p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><i>expDigits</i> is the number of
digits to display in the exponent; leading zeroes are inserted if necessary to
fill the requested number of places.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>Each of <i>wholePlaces</i>, <i>fracDigits</i>,
and <i>expDigits</i> can be specified as –1, which tells the method to use the
default value, which is simply the number of digits actually needed for the
respective parts.</p>

<p class=MsoNormal style='tab-stops:.5in'><span style="mso-spacerun:
yes"> </span></p>

<p class=MsoNormal style='tab-stops:.5in'><i>leadFiller,</i> if specified,
gives a string that is used instead of spaces to fill the beginning of the
string, if required to satisfy the <i>wholePlaces </i>argument.<span
style="mso-spacerun: yes">  </span>This argument is ignored if its value is
nil.<span style="mso-spacerun: yes">  </span>If a string value is provided for
this argument, the characters of the string are inserted, one at a time, to
fill out the <i>wholePlaces </i>requirement; if the end of the string is
reached before the full set of padding characters is inserted, the function
starts over again at the beginning of the string.<span style="mso-spacerun:
yes">  </span>For example, to insert alternating asterisks and pound signs, you
would specify '*#' for this argument.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><i>flags </i>is a combination of the
following bit-flag values (combined with the bit-wise OR operator, '|'):</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal style='mso-list:l1 level1 lfo5;tab-stops:list .5in'>BignumSign
     – always show a sign character.<span style="mso-spacerun: yes"> 
     </span>Normally, if the number is positive, the function omits the sign
     character.<span style="mso-spacerun: yes">  </span>If this flag is
     specified, a '+' sign is shown for a positive number.</li>
 <li class=MsoNormal style='mso-list:l1 level1 lfo5;tab-stops:list .5in'>BignumPosSpace
     – if the number is positive and this flag is set, the function inserts a
     leading space.<span style="mso-spacerun: yes">  </span>(If BignumSign is
     specified, this flag is ignored.)<span style="mso-spacerun: yes"> 
     </span>This function can be used to ensure that positive and negative
     numbers fill the same number of character positions, even when you don't
     want to use a '+' sign with positive numbers.</li>
 <li class=MsoNormal style='mso-list:l1 level1 lfo5;tab-stops:list .5in'>BignumExp
     – always show the number in exponential format (scientific notation).<span
     style="mso-spacerun: yes">  </span>If this is not included, the function
     shows the number without an exponent if it will fit in <i>maxDigits</i>
     digits.</li>
 <li class=MsoNormal style='mso-list:l1 level1 lfo5;tab-stops:list .5in'>BignumExpSign
     – always show a sign in the exponent.<span style="mso-spacerun: yes"> 
     </span>If this is included, a positive exponent will be shown with a '+'
     sign.<span style="mso-spacerun: yes">  </span>This flag is ignored unless
     an exponent is displayed (so specifying this flag doesn't force an
     exponent to be displayed).</li>
 <li class=MsoNormal style='mso-list:l1 level1 lfo5;tab-stops:list .5in'>BignumLeadingZero
     – always show a zero before the decimal point.<span style="mso-spacerun:
     yes">  </span>This is only important when the number's absolute value is
     between 0 and 1, and an exponent isn't displayed; without this flag, no
     digits will precede the decimal point for such values (so 0.25 would be
     formatted as simply '.25').</li>
 <li class=MsoNormal style='mso-list:l1 level1 lfo5;tab-stops:list .5in'>BignumPoint
     – always show a decimal point.<span style="mso-spacerun: yes">  </span>If
     the number has no fractional digits to display, and this flag is included,
     a trailing decimal point is displayed.<span style="mso-spacerun: yes"> 
     </span>Without this flag, no decimal point is displayed if no digits are
     displayed after the decimal point.</li>
 <li class=MsoNormal style='mso-list:l1 level1 lfo5;tab-stops:list .5in'>BignumCommas
     – show commas to set off thousands, millions, billions, and so on.<span
     style="mso-spacerun: yes">  </span>This flag has no effect if the number
     is shown in scientific notation.<span style="mso-spacerun: yes"> 
     </span>Commas do not count against the <i>maxDigits</i> or <i>wholePlaces</i>
     limits.<span style="mso-spacerun: yes">  </span>However, commas <i>do </i>count
     for leading filler, which ensures that a column of numbers formatted with
     filler and commas will line up properly.</li>
 <li class=MsoNormal style='mso-list:l1 level1 lfo5;tab-stops:list .5in'>BignumEuroStyle
     – use European-style formatting: use periods instead of commas to set off
     thousands, millions, etc., and use a comma instead of a period to indicate
     the decimal point.</li>
</ul>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><b>getAbs()</b> – returns a number
containing the absolute value of this number.<span style="mso-spacerun: yes"> 
</span>(This function could be easily coded from a comparison and negation, but
the method implementation is more efficient.)</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><b>getCeil() – </b>&quot;ceiling&quot;:
returns a number containing the least integer greater than this number.<span
style="mso-spacerun: yes">  </span>For example, the ceiling of 2.2 is 3.<span
style="mso-spacerun: yes">  </span>Note that for negative numbers, the least integer
above a number has a smaller absolute value, so the ceiling of –1.6 is –1.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><b>getE(<i>digits</i>) – </b>returns
the value of e (the base of the natural logarithm) to the given number of
digits of precision.<span style="mso-spacerun: yes">  </span>This is a static
method, so you can call this method directly on the BigNumber class itself:</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style="mso-spacerun: yes">    </span>x = BigNumber.getE(10);</pre>

<p class=MsoNormal style='tab-stops:.5in'><b><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></b></p>

<p class=MsoNormal style='tab-stops:.5in'>The BigNumber class internally caches
the value of e to the highest precision calculated during the program's
execution, so this routine only needs to compute the value when it is called with
a higher precision than that of the cached value.</p>

<p class=MsoNormal style='tab-stops:.5in'><b><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></b></p>

<p class=MsoNormal style='tab-stops:.5in'><b>getFloor() – </b>&quot;floor&quot;:
returns a number containing the greatest integer less than this number.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><b>getFraction() – </b>returns a
number containing only the fractional part of this number (the digits after the
decimal point). </p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><b>getPi(<i>digits</i>) – </b>returns
the value of pi to the given number of digits of precision.<span
style="mso-spacerun: yes">  </span>This is a static method, so you can call
this method directly on the BigNumber class itself:</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style="mso-spacerun: yes">    </span>x = BigNumber.getPi(10);</pre>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>The BigNumber class internally caches
the value of pi to the highest precision calculated during the program's
execution, so this routine only needs to compute the value when it is called
with a higher precision than that of the cached value.</p>

<p class=MsoNormal style='tab-stops:.5in'><b><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></b></p>

<p class=MsoNormal style='tab-stops:.5in'><b>getPrecision() – </b>returns the
number of digits of precision that this number stores.<span
style="mso-spacerun: yes">  </span>The return value is of type integer.</p>

<p class=MsoNormal style='tab-stops:.5in'><b><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></b></p>

<p class=MsoNormal style='tab-stops:.5in'><b>getScale() – </b>returns a value
of type integer giving the base-10 scale of this number.<span
style="mso-spacerun: yes">  </span>If the return value is positive, it
indicates the number of digits before the decimal point in the decimal
representation of the number.<span style="mso-spacerun: yes">  </span>If the
return value is zero, it indicates that the number has no whole part, and that
the first digit after the decimal point is non-zero (so the number is greater
than or equal to 0.1, and less than 1.0).<span style="mso-spacerun: yes"> 
</span>If the return value is negative, it indicates that the number has no
whole part, and gives the number of digits of zeroes that immediately follow
the decimal point before the first non-zero digit.<span style="mso-spacerun:
yes">  </span>If the value of the number is exactly zero, the return value is
1.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><b>getWhole() – </b>returns a number
containing only the whole part of this number (the digits before the decimal
point).</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><b>isNegative()</b> – returns true if
the number is less than zero, nil if the number is greater than or equal to
zero.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><b>log10() – </b>returns the base-10
logarithm of the number.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><b>logE() – </b>returns the natural
logarithm of the number.<span style="mso-spacerun: yes">  </span>The logarithm
of a non-positive number is not a real number, so this function throws a
run-time exception if the number is less than or equal to zero.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><b>negate()</b> – returns a number
containing the arithmetic negative of this number.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><b>radiansToDegrees() – </b>converts
the value from degrees to radians and returns the number of radians.<span
style="mso-spacerun: yes">  </span>This simply multiplies the value by
(180/pi).</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><b>raiseToPower(<i>y</i>) – </b>computes
the value of this number raised to the power <i>y </i>and returns the
result.<span style="mso-spacerun: yes">  </span>If the value of the target
number is negative, then <i>y </i>must be an integer: if x &lt; 0, we can
rewrite x<sup>y</sup> as (-1)<sup> y</sup> (-x)<sup> y</sup>, and we know that
–x &gt; 0 because x &lt; 0.<span style="mso-spacerun: yes">  </span>The result
of raising –1 to a non-integer exponent cannot be represented as a real number,
hence this function throws an error if the target number is negative.<span
style="mso-spacerun: yes">  </span>Note also that raising zero to any power
yields 1, and raising any value to the power 0 yields 1, but the special case
of 0<sup>0</sup> is mathematically undefined, so the function throws an error
for this case.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><b>roundToDecimal(<i>places</i>) – </b>returns
a number rounded to the given number of digits after the decimal point.<span
style="mso-spacerun: yes">  </span>The new number has the same precision as
this number, but all of the digits after the given number of places after the
decimal point will be set to zero, and the last surviving digit will be
rounded.<span style="mso-spacerun: yes">  </span>If <i>places </i>is zero, this
simply rounds the number to an integer.<span style="mso-spacerun: yes"> 
</span>If places is less than zero, this rounds the number to a power of ten:
roundToDecimal(-1) rounds to the nearest multiple of ten, roundToDecimal(-2)
rounds to the nearest multiple of 100, and so on.<span style="mso-spacerun:
yes">  </span>Note that the precision of the result is the same as the
precision of the original value; rounding merely affects the value, not the
stored precision.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><b>scaleTen(<i>x</i>)</b> – returns a
new number containing the value of this number scaled by 10<sup>x</sup>.<span
style="mso-spacerun: yes">  </span>If <i>x</i> is positive, this multiplies
this number's value by ten <i>x</i> times (so if <i>x</i> = 3, the result is
this number's value times 1000). <span style="mso-spacerun: yes"> </span>If <i>x
</i>is negative, this divides this number's value by ten <i>x </i>times.<span
style="mso-spacerun: yes">  </span>(This is more efficient than explicitly
multiplying by ten, because it simply adjusts the number's internal scale
factor.)</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><b>setPrecision(<i>digits</i>) – </b>returns
a new number with the same value as this number but with the specified number
of digits of precision.<span style="mso-spacerun: yes">  </span>If <i>digits</i>
is higher than this number's precision, the new value is simply extended with
zeroes in the added trailing digits.<span style="mso-spacerun: yes">  </span>If
<i>digits </i>is lower than this number's precision, the value is rounded to
the given number of digits of precision.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><a name=divideBy></a><b>sine() – </b>computes
the trigonometric sine of the number (interpreted as a radian value) and
returns the result.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>Note that the input value must be
expressed in radians.<span style="mso-spacerun: yes">  </span>If you are
working in degrees, you can convert to radians by multiplying your degree
values by (pi/180), since 180 degress equals pi radians.<span
style="mso-spacerun: yes">  </span>For convenience, you can use the
degreesToRadians() function to perform this conversion.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>Note also that this remainder
calculation's precision is limited by the precision of the original number
itself, so a very large number with insufficient precision to represent at
least a few digits after the decimal point (1.234e27, for example) will encounter
a possibly significant amount of rounding error, which will affect the accuracy
of the result.<span style="mso-spacerun: yes">  </span>This should almost never
be a problem in practice, because there is usually little reason to compute
angle values outside of plus or minus a few times pi, but users should keep
this in mind if they are using very large numbers and the trigonometric
functions yield unexpected or inaccurate results.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><b>sinh() </b>– computes the
hyperbolic sine of the number and returns the result.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><b>sqrt() – </b>returns the square
root of the number.<span style="mso-spacerun: yes">  </span>If the number is
negative, this function throws a run-time exception.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><b>tangent()</b> – computes the
trigonometric tangent of the number (interpreted as a radian value) and returns
the result.<span style="mso-spacerun: yes">  </span>Refer to the description of
sine() for notes on how the input precision affects the calculation.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>Note that the tangent of (2n+1)*pi/2,
where n is any integer, (i.e., any odd multiple of pi/2) is undefined, and that
the limit approaching these values is plus or minus infinity.<span
style="mso-spacerun: yes">  </span>The BigNumber class internally calculates
the tangent as the sine divided by the cosine, and as a result it is possible
to generate a divide-by-zero exception by evaluating the tangent at one of
these values.<span style="mso-spacerun: yes">  </span>However, in most cases,
because the input value cannot be <i>exactly </i>an odd multiple of pi/2
(because it isn't even theoretically possible to represent pi exactly with a
finite number of decimal digits), the tangent will return a number with a very
large absolute value.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'><b>tanh() – </b>computes the
hyperbolic tangent of the number and returns the result.</p>

<h3 style='tab-stops:.5in'><a name="_Precision_and_Scale_1"></a>Precision and
Scale</h3>

<p class=MsoNormal style='tab-stops:.5in'>Each floating-point value that
BigNumber represents has two important attributes apart from its value: <i>precision
</i>and <i>scale</i>.<span style="mso-spacerun: yes">  </span>For the most
part, these are internal attributes that you can ignore; however, in certain
cases, it's useful to know how BigNumber uses these internally.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>The <i>scale </i>of a BigNumber value
is a multiplier that determines how large the number really is.<span
style="mso-spacerun: yes">  </span>A BigNumber value stores a scale so that a
very large or very small number can be represented compactly, without storing
all of the digits that would be necessary to write out the number in decimal
format.<span style="mso-spacerun: yes">  </span>This is the same idea as
writing a number in scientific notation, which represents a number as a value
between 1 and 10 multiplied by ten raised to a power; for example, we could
write four hundred fifty billion as 450,000,000,000, or more compactly in
scientific notation as 4.5e11 (the &quot;e&quot; means &quot;times ten to the
power of the number that follows&quot;, so this means &quot;4.5 times 10<sup>11&quot;</sup>;
note that 10<sup>11</sup> is one hundred billion).<span style="mso-spacerun:
yes">  </span>When we write a number in scientific notation, we need only write
the <i>significant</i> digits, and can elide the trailing zeroes of a very
large number.<span style="mso-spacerun: yes">  </span>We can also use
scientific notation to write numbers with very small absolute values, by using
a negative exponent: 9.7e-9 is 9.7 times 10<sup>-9</sup>; 10<sup>-9</sup> is
1/10<sup>9</sup>, or one one-billionth.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>The <i>precision</i> of a BigNumber
value is simply the number of decimal digits that the value actually
stores.<span style="mso-spacerun: yes">  </span>A number's precision determines
how many distinct values it can have; the higher the precision, the more values
it can store, and hence the finer the distinctions it can make between adjacent
representable values.<span style="mso-spacerun: yes">  </span>The precision is
independent of the scale; if you create a BigNumber value with only one digit
of precision, it's not limited to representing the values –9 through +9,
because the scale can allow it take on larger or smaller values.<span
style="mso-spacerun: yes">  </span>So, you can represent arbitrarily large
values regardless of a number's precision; however, the precision limits the
number of distinct values the number can represent, so, for example, with one
digit of precision, the next representable value after 8000 is 9000.</p>

<p class=MsoNormal style='tab-stops:.5in'><span style="mso-spacerun:
yes"> </span></p>

<p class=MsoNormal style='tab-stops:.5in'>When you create a BigNumber value,
you can explicitly assign it a precision by passing a precision specifier to
the constructor.<span style="mso-spacerun: yes">  </span>If you don't specify a
precision, BigNumber will use a default precision.<span style="mso-spacerun:
yes">  </span>If you create a BigNumber value from an integer, the default
precision is 32 digits.<span style="mso-spacerun: yes">  </span>If you create a
BigNumber value from a string, the precision is exactly enough to store the
value's significant digits.<span style="mso-spacerun: yes">  </span>A
significant digit is a non-zero digit, or a zero that follows a non-zero
digit.<span style="mso-spacerun: yes">  </span>Here are some examples:</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal style='mso-list:l2 level1 lfo8;tab-stops:list .5in'>'0012'
     has two significant digits (the leading zeroes are ignored).</li>
 <li class=MsoNormal style='mso-list:l2 level1 lfo8;tab-stops:list .5in'>'1.2000'
     has five significant digits (the trailing zeroes are significant because
     they follow non-zero digits).</li>
 <li class=MsoNormal style='mso-list:l2 level1 lfo8;tab-stops:list .5in'>'.00012'
     has two significant digits (the leading zeroes are ignored, even though
     they follow the decimal point).</li>
 <li class=MsoNormal style='mso-list:l2 level1 lfo8;tab-stops:list .5in'>'000.00012'
     has two significant digits (leading zeroes are ignored, whether they
     appear before or after the decimal point).</li>
 <li class=MsoNormal style='mso-list:l2 level1 lfo8;tab-stops:list .5in'>'1.00012'
     has six significant digits (the zeroes after the decimal point are
     significant because they follow a non-zero digit).</li>
 <li class=MsoNormal style='mso-list:l2 level1 lfo8;tab-stops:list .5in'>'3.20e06'
     has three significant digits (the digits of the exponent, if specified,
     are not relevant to the number's precision).</li>
</ul>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>When you use numbers in calculations,
the result is almost every case has the same precision as the value operated
upon; in the case of calculations involving two or more operands, the result
has precision equal to the greatest of the precisions of the operands.<span
style="mso-spacerun: yes">  </span>For example, if you add a number with three
digits of precision to a number with eight digits of precision, the result will
have eight digits of precision.<span style="mso-spacerun: yes">  </span>This has
the desirable effect of preserving the precision of your values in arithmetic,
so that the precision you choose for your input data values is carried forward
throughout your calculations.<span style="mso-spacerun: yes">  </span>For
example, consider this calculation:</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style="mso-spacerun: yes">  </span>x = new BigNumber('3.1415');</pre><pre><span style="mso-spacerun: yes">  </span>y = new BigNumber('0.000111');</pre><pre><span style="mso-spacerun: yes">  </span>z = x + y;</pre>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>The exact arithmetic value of this
calculation would be 3.1416111, but this is <i>not </i>the value that ends up
in z, because the precision of the operands limits the precision of the
result.<span style="mso-spacerun: yes">  </span>The precision of x is 5,
because it is created from a string with five significant digits.<span
style="mso-spacerun: yes">  </span>The precision of y is 3.<span
style="mso-spacerun: yes">  </span>The result of the addition will have a
precision of 5, because that is the larger of the two input precisions.<span
style="mso-spacerun: yes">  </span>So, the result value stored in z will be 3.1416
– the additional two digits of y are dropped, because they cannot be
represented in the result value's 5 digits of precision.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>Precision limitations are fairly
intuitive when the precision lost is after the decimal point, but note that
digits can also be dropped <i>before </i>a decimal point.<span
style="mso-spacerun: yes">  </span>Consider this calculation:</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style="mso-spacerun: yes">  </span>x = new BigNumber('7.25e3');</pre><pre><span style="mso-spacerun: yes">  </span>y = new BigNumber('122');</pre><pre><span style="mso-spacerun: yes">  </span>z = x + y;</pre>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>The value of x is 7.25e3, or 7250;
this value has three digits of precision.<span style="mso-spacerun: yes"> 
</span>The value of y also has three digits of precision.<span
style="mso-spacerun: yes">  </span>The exact result of the calculation is 7372,
but the value stored in z will be 7370: the last digit of y is dropped because
the result doesn't have enough precision to represent it.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>Note that calculations will in most cases
round their result values when they must drop precision from operand
values.<span style="mso-spacerun: yes">  </span>For example:</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style="mso-spacerun: yes">  </span>x = new BigNumber('7.25e3');</pre><pre><span style="mso-spacerun: yes">  </span>y = new BigNumber('127');</pre><pre><span style="mso-spacerun: yes">  </span>z = x + y;</pre>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>The exact result would be 7377, but
the value stored in z will be 7380: the last digit of y is dropped, but the
system rounds up the last digit retained because the dropped digit is 5 or
higher (in this case, 7).</p>

<h3>Sample Application: Exorcising Parasitic Users</h3>

<p class=MsoNormal>Apart from the obvious numerical applications, the BigNumber
package can be useful if your computer is taken over by a hostile, parasitic,
pure-energy life form capable of transferring itself between human and computer
hosts.<span style="mso-spacerun: yes">  </span>A quick survey of the literature
will reveal that the best tactic against this type of infection is to command
the computer to calculate a transcendental number (pi, for example) to the last
digit.<span style="mso-spacerun: yes">  </span>Computers are unable to
comprehend the concept of irrational numbers, since they are so very rational,
so such a calculation so preoccupies the computer that the unwanted life form
is unable to get any CPU time and eventually flees the computer in frustration.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>While BigNumber doesn't provide a way of computing
transcendental numbers &quot;to the last digit,&quot; you can still consume
copious amounts of CPU time by asking it to compute a value to a large finite
number of digits, such as</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<pre><span style="mso-spacerun: yes">    </span>x = BigNumber.getPi(512);</pre>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>This will consume about twenty
minutes on a Pentium III at 400 MHz.<span style="mso-spacerun: yes">  </span>If
the parasitic entity is especially tenacious, or tries to shut down life
support, it might be necessary to go out to a thousand or so digits.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='tab-stops:.5in'>Note that this technique isn't
effective against conventional computer viruses, so users should ensure that
the problem can't be addressed with standard anti-virus software before
attempting this solution.</p>

<p class=MsoNormal style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

</div>

</body>

</html>
